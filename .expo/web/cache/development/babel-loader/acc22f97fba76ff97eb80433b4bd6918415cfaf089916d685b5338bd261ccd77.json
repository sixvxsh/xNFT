{"ast":null,"code":"import ReactXnft from \"react-xnft\";\nimport * as buffer from \"buffer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nwindow.Buffer = buffer.Buffer;\nReactXnft.events.on(\"connect\", function () {});\n/getBalance/;\nexport function OpenXnftButton() {\n  var onClick = function onClick() {\n    var degodsXnft = \"AM8TpkQaKnoiofQZrnBWhhbmUfrDo2kWJLLoNm2kybAW\";\n    window.backpack.openXnft(degodsXnft);\n  };\n  return _jsx(\"button\", {\n    onClick: onClick,\n    children: \"Open xNFT\"\n  });\n}","map":{"version":3,"names":["ReactXnft","buffer","jsx","_jsx","window","Buffer","events","on","OpenXnftButton","onClick","degodsXnft","backpack","openXnft","children"],"sources":["/home/sixvxsh/Programming/blockchain/backpack/xnft-quickstart-final/src/screens/HomeScreen.tsx"],"sourcesContent":["// import { NextPage } from 'next'\nimport { FC, ReactNode } from \"react\"\n\n\nimport {\n  TransactionMessage,\n  VersionedTransaction,\n  SystemProgram,\n  Transaction,\n  PublicKey,\n  Keypair,\n  sendAndConfirmTransaction,\n  Connection,\n  clusterApiUrl,\n} from \"@solana/web3.js\";\nimport { FlatList } from \"react-native\";\nimport tw from \"twrnc\";\n\nimport { Screen } from \"../components/Screen\";\nimport ReactXnft, { Button,  Text, View, usePublicKey } from \"react-xnft\";\n\nimport { useEffect, useState } from \"react\";\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react'\nimport * as buffer from \"buffer\";\nwindow.Buffer = buffer.Buffer;\n// ==================================\nimport {\n  Metaplex,\n  keypairIdentity,\n  bundlrStorage,\n  toMetaplexFile,\n  NftWithToken,\n  BigNumber,\n} from \"@metaplex-foundation/js\"\nimport * as fs from \"fs\"\n\n\nReactXnft.events.on(\"connect\", () => {\n  \n});\n\n\n// /=========================================================/\n/getBalance/\n// export function App() {\n//   useEffect(() => {\n//     (async () => {\n//       console.log(\n//         \"Solana balance\",\n//         await window.xnft.solana.connection.getBalance(\n//           window.xnft.solana.publicKey\n//         )\n//       );\n//       console.log(\n//         \"Ethereum balance\",\n//         (\n//           await window.xnft.ethereum.provider.getBalance(\n//             window.xnft.ethereum.publicKey\n//           )\n//         ).toString()\n//       );\n//     })();\n//   }, [])};\n\n// ===============================================================\n//Sign transfer tx\n// export function HomeScreen () {\n//   const solanaSignAndConfirmTx = async () => {\n//     const transaction = new Transaction().add(\n//       SystemProgram.transfer({\n//         fromPubkey: window.xnft.solana.publicKey,\n//         toPubkey: new PublicKey(\"3VHwVfYVibgWasVAAGX71DwTMnj3Zxn6ATir3ohsCGqP\"),\n//         lamports:1_000_000_000,\n//       })\n//     );\n//     try {\n//       const result = await window.xnft.solana.sendAndConfirm(transaction);\n//       console.log(\"Solana sign and confirm tx\" , result);\n//     } catch (e) {\n//       console.log(`Error while signing ${e}`);\n//     }\n//   };\n//   return (\n//     <View style={{ margin: \"24px\"}}>\n//       <Text >Hi Blockchain Guyes. Please Sign your message </Text>\n//       <Button style={{ width: \"75%\" }} onClick={solanaSignAndConfirmTx}>Sign Message</Button>\n//     </View>\n//   );\n// }\n\n// ===============================================================\n\n\n  \n\nexport function OpenXnftButton() {\n  const onClick = () => {\n    const degodsXnft = \"AM8TpkQaKnoiofQZrnBWhhbmUfrDo2kWJLLoNm2kybAW\";\n    window.backpack.openXnft(degodsXnft);\n  };\n  return <button onClick={onClick}>Open xNFT</button>;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const endpoint = web3.clusterApiUrl('devnet')\n// const wallets = [new walletAdapterWallets.PhantomWalletAdapter()]\n\n// // export const Home: NextPage = (props) => {\n// //   const endpoint = web3.clusterApiUrl('devnet')\n// //   const wallet = new PhantomWalletAdapter()\n\n// //   return (\n// //       <ConnectionProvider endpoint={endpoint}>\n// //           <WalletProvider wallets={[wallet]}>\n// //               <p>Put the rest of your app here</p>\n// //           </WalletProvider>\n// //       </ConnectionProvider>\n// //   )\n// // }\n\n\n\n\n// const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n\n// ReactXnft.events.on(\"connect\", () => {\n  \n// });\n\n\n\n\n\n// export function HomeScreen() {\n//   const publicKey = usePublicKey()\n//   const toPubkey = new PublicKey(\"3VHwVfYVibgWasVAAGX71DwTMnj3Zxn6ATir3ohsCGqP\")\n//   const lamportsToSend = 1_000_000;\n\n//   const onClick = async () => {\n\n//     const tx = new Transaction().add(\n//       SystemProgram.transfer({\n//         fromPubkey: publicKey,\n//         toPubkey: toPubkey,\n//         lamports:lamportsToSend,\n//       })\n//     );\n//     await sendAndConfirmTransaction(connection, tx, [\n//       // publicKey,\n//     ]);\n//     console.log(sendAndConfirmTransaction);\n\n//   window.xnft.solana.signTransaction(\n\n//   )\n// };\n  \n// return (\n//   <View>\n//     <Text >Hi Blockchain Guyes.</Text>\n//     <Button onClick={onClick}>Sign your Message</Button>\n//   </View>\n//   );\n// }\n"],"mappings":"AAmBA,OAAOA,SAAS,MAA6C,YAAY;AAIzE,OAAO,KAAKC,MAAM,MAAM,QAAQ;AAAC,SAAAC,GAAA,IAAAC,IAAA;AACjCC,MAAM,CAACC,MAAM,GAAGJ,MAAM,CAACI,MAAM;AAa7BL,SAAS,CAACM,MAAM,CAACC,EAAE,CAAC,SAAS,EAAE,YAAM,CAErC,CAAC,CAAC;AAIF,YAAY;AAoDZ,OAAO,SAASC,cAAcA,CAAA,EAAG;EAC/B,IAAMC,OAAO,GAAG,SAAVA,OAAOA,CAAA,EAAS;IACpB,IAAMC,UAAU,GAAG,8CAA8C;IACjEN,MAAM,CAACO,QAAQ,CAACC,QAAQ,CAACF,UAAU,CAAC;EACtC,CAAC;EACD,OAAOP,IAAA;IAAQM,OAAO,EAAEA,OAAQ;IAAAI,QAAA,EAAC;EAAS,EAAS;AACrD"},"metadata":{},"sourceType":"module","externalDependencies":[]}