{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport axios from \"axios\";\nimport { PublicKey, Keypair, Connection, clusterApiUrl } from \"@solana/web3.js\";\nimport { PhantomWalletAdapter } from \"@solana/wallet-adapter-phantom\";\nimport ReactXnft, { Button, Text, View } from \"react-xnft\";\nimport { useState } from \"react\";\nimport * as buffer from \"buffer\";\nwindow.Buffer = buffer.Buffer;\nimport { Metaplex, keypairIdentity } from \"@metaplex-foundation/js\";\nReactXnft.events.on(\"connect\", function () {});\n/getBalance/;\nvar ListAll = function ListAll() {\n  var xKey = \"\";\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    wallID = _useState2[0],\n    setWallID = _useState2[1];\n  var _useState3 = useState(\"devnet\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    network = _useState4[0],\n    setNetwork = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isLoaded = _useState6[0],\n    setLoaded = _useState6[1];\n  var _useState7 = useState(),\n    _useState8 = _slicedToArray(_useState7, 2),\n    dataFetched = _useState8[0],\n    setDataFetched = _useState8[1];\n  var _useState9 = useState(false),\n    _useState10 = _slicedToArray(_useState9, 2),\n    connStatus = _useState10[0],\n    setConnStatus = _useState10[1];\n  var solanaConnect = function () {\n    var _ref = _asyncToGenerator(function* () {\n      console.log('clicked solana connect');\n      var _window = window,\n        solana = _window.solana;\n      if (!solana) {\n        alert(\"Please Install Solana\");\n      }\n      try {\n        var phantom = new PhantomWalletAdapter();\n        yield phantom.connect();\n        var rpcUrl = clusterApiUrl(network);\n        var connection = new Connection(rpcUrl, \"confirmed\");\n        var wallet = {\n          address: backpack.publicKey.toString()\n        };\n        if (wallet.address) {\n          console.log(wallet.address);\n          setWallID(wallet.address);\n          var accountInfo = yield connection.getAccountInfo(new PublicKey(wallet.address), \"confirmed\");\n          console.log(accountInfo);\n          setConnStatus(true);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    });\n    return function solanaConnect() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var fetchNFTs = function fetchNFTs(e) {\n    e.preventDefault();\n    var nftUrl = \"https://api.shyft.to/sol/v1/nft/read_all?network=\" + network + \"&address=\" + wallID;\n    axios({\n      url: nftUrl,\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": xKey\n      }\n    }).then(function (res) {\n      console.log(res.data);\n      setDataFetched(res.data);\n      setLoaded(true);\n    }).catch(function (err) {\n      console.warn(err);\n    });\n  };\n  return _jsxs(\"div\", {\n    className: \"grd-back\",\n    children: [_jsx(\"div\", {\n      className: \"container-lg\",\n      children: _jsxs(\"div\", {\n        className: \"py-4 text-center\",\n        children: [_jsx(\"h1\", {\n          children: \"List All Your NFTs\"\n        }), _jsx(\"p\", {\n          children: \"This is a sample project which will list all your NFTs associated with your wallet\"\n        })]\n      })\n    }), _jsxs(\"div\", {\n      className: \"container-lg\",\n      children: [!connStatus && _jsx(\"div\", {\n        className: \"card border border-light rounded py-3 px-5 w-50 bg-dark text-light mx-auto\",\n        children: _jsxs(\"div\", {\n          className: \"card-body text-center\",\n          children: [_jsx(\"h2\", {\n            className: \"card-title p-2\",\n            children: \"Connect Your Wallet\"\n          }), _jsx(\"p\", {\n            className: \"card-text p-1\",\n            children: \"You need to connect your wallet to deploy and interact with your contracts.\"\n          }), _jsx(\"button\", {\n            className: \"btn btn-light rounded-pill mt-5 px-3\",\n            onClick: solanaConnect,\n            children: \"Connect Phantom Wallet\"\n          })]\n        })\n      }), connStatus && _jsx(\"div\", {\n        className: \"w-50 border border-light rounded-3 mx-auto bg-dark\",\n        children: _jsx(\"div\", {\n          className: \"form-container p-3\",\n          children: _jsxs(\"form\", {\n            children: [_jsxs(\"div\", {\n              className: \"row d-flex justify-content-center\",\n              children: [_jsx(\"div\", {\n                className: \"col-12 p-2\",\n                children: _jsxs(\"select\", {\n                  name: \"network\",\n                  className: \"form-control form-select\",\n                  id: \"\",\n                  onChange: function onChange(e) {\n                    return setNetwork(e.target.value);\n                  },\n                  children: [_jsx(\"option\", {\n                    value: \"devnet\",\n                    children: \"Devnet\"\n                  }), _jsx(\"option\", {\n                    value: \"testnet\",\n                    children: \"Testnet\"\n                  }), _jsx(\"option\", {\n                    value: \"mainnet-beta\",\n                    children: \"Mainnet Beta\"\n                  })]\n                })\n              }), _jsx(\"div\", {\n                className: \"col-12 p-2\",\n                children: _jsx(\"input\", {\n                  type: \"text\",\n                  className: \"form-control\",\n                  placeholder: \"Enter Wallet Id\",\n                  value: wallID\n                })\n              })]\n            }), _jsx(\"div\", {\n              className: \"text-center p-3\",\n              children: _jsx(\"button\", {\n                className: \"button-24\",\n                onClick: fetchNFTs,\n                children: \"Get\"\n              })\n            })]\n          })\n        })\n      })]\n    }), _jsx(\"div\", {\n      className: \"container-lg\",\n      children: _jsx(\"div\", {\n        className: \"cards-section py-4\",\n        children: _jsx(\"div\", {\n          className: \"row\",\n          children: isLoaded && dataFetched.result.map(function (item) {\n            return _jsx(\"div\", {\n              className: \"col-xs-12 col-sm-3 p-3\",\n              children: _jsx(\"div\", {\n                className: \"card nft-card bg-dark\",\n                children: _jsxs(\"div\", {\n                  className: \"card-body\",\n                  children: [_jsx(\"a\", {\n                    href: \"/get-details?token_address=\" + item.mint + \"&network=\" + network,\n                    target: \"_blank\",\n                    rel: \"noreferrer\",\n                    children: _jsx(\"img\", {\n                      className: \"card-image img-fluid\",\n                      src: item.image_uri,\n                      alt: \"img\"\n                    })\n                  }), _jsx(\"a\", {\n                    href: \"/get-details?token_address=\" + item.mint + \"&network=\" + network,\n                    target: \"_blank\",\n                    rel: \"noreferrer\",\n                    children: _jsx(\"h5\", {\n                      children: item.name\n                    })\n                  })]\n                })\n              })\n            }, item.mint);\n          })\n        })\n      })\n    })]\n  });\n};\nimport React from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var HomeScreen = function HomeScreen() {\n  var connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n  var bh = window.backpack.connection.getLatestBlockhash();\n  console.log(\"got latest blockhash1\", bh);\n  var keypair = Keypair.fromSecretKey(Uint8Array.from([76, 136, 189, 77, 118, 217, 252, 31, 90, 170, 9, 127, 109, 163, 161, 210, 167, 247, 16, 201, 199, 166, 211, 239, 158, 170, 35, 184, 84, 215, 133, 141, 245, 87, 98, 122, 163, 187, 139, 227, 236, 74, 116, 161, 179, 154, 157, 101, 62, 146, 104, 163, 216, 106, 241, 247, 6, 197, 163, 221, 57, 96, 207, 22]));\n  console.log(\"got latest blockhash2\", bh);\n  var metaplex = new Metaplex(connection);\n  metaplex.use(keypairIdentity(keypair));\n  var owner = new PublicKey(\"HWiApthq473nmMRhkuQGWQhMztvR5oZnXazWWn2Hoksf\");\n  var _useState11 = useState([]),\n    _useState12 = _slicedToArray(_useState11, 2),\n    allNFTs = _useState12[0],\n    setAllNFTs = _useState12[1];\n  console.log(\"got latest blockhash3\", bh);\n  var fetchAllNFTs = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var data = yield metaplex.nfts().findAllByOwner({\n        owner: owner\n      });\n      console.log(data);\n      setAllNFTs(data);\n      console.log(\"got latest blockhash4\", bh);\n    });\n    return function fetchAllNFTs() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: {\n      margin: \"24px\"\n    },\n    children: [_jsx(Text, {\n      children: \"If you want to see your NFTs please Click on\"\n    }), _jsx(Button, {\n      style: {\n        width: \"75%\"\n      },\n      onClick: fetchAllNFTs,\n      children: \"My NFTs\"\n    }), JSON.stringify(allNFTs), \"all\"]\n  });\n};","map":{"version":3,"names":["axios","PublicKey","Keypair","Connection","clusterApiUrl","PhantomWalletAdapter","ReactXnft","Button","Text","View","useState","buffer","window","Buffer","Metaplex","keypairIdentity","events","on","ListAll","xKey","_useState","_useState2","_slicedToArray","wallID","setWallID","_useState3","_useState4","network","setNetwork","_useState5","_useState6","isLoaded","setLoaded","_useState7","_useState8","dataFetched","setDataFetched","_useState9","_useState10","connStatus","setConnStatus","solanaConnect","_ref","_asyncToGenerator","console","log","_window","solana","alert","phantom","connect","rpcUrl","connection","wallet","address","backpack","publicKey","toString","accountInfo","getAccountInfo","err","apply","arguments","fetchNFTs","e","preventDefault","nftUrl","url","method","headers","then","res","data","catch","warn","_jsxs","className","children","_jsx","onClick","name","id","onChange","target","value","type","placeholder","result","map","item","href","mint","rel","src","image_uri","alt","React","jsx","jsxs","HomeScreen","bh","getLatestBlockhash","keypair","fromSecretKey","Uint8Array","from","metaplex","use","owner","_useState11","_useState12","allNFTs","setAllNFTs","fetchAllNFTs","_ref2","nfts","findAllByOwner","style","margin","width","JSON","stringify"],"sources":["/home/sixvxsh/Programming/blockchain/backpack/xnft-quickstart-final/src/screens/HomeScreen.tsx"],"sourcesContent":["// import { NextPage } from 'next'\nimport { FC, ReactNode } from \"react\"\nimport axios from \"axios\";\n\nimport {\n  TransactionMessage,\n  VersionedTransaction,\n  SystemProgram,\n  Transaction,\n  PublicKey,\n  Keypair,\n  sendAndConfirmTransaction,\n  Connection,\n  clusterApiUrl,\n} from \"@solana/web3.js\";\nimport { FlatList } from \"react-native\";\nimport tw from \"twrnc\";\nimport { useMemo } from \"react\";\nimport { BackpackWalletAdapter } from \"@solana/wallet-adapter-backpack\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { PhantomWalletAdapter } from \"@solana/wallet-adapter-phantom\";\nimport { Screen } from \"../components/Screen\";\nimport ReactXnft, { Button,  Text, View, usePublicKey } from \"react-xnft\";\n\nimport { useEffect, useState } from \"react\";\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react'\nimport * as buffer from \"buffer\";\nwindow.Buffer = buffer.Buffer;\n// ==================================\nimport {\n  Metaplex,\n  keypairIdentity,\n  bundlrStorage,\n  toMetaplexFile,\n  NftWithToken,\n  BigNumber,\n} from \"@metaplex-foundation/js\"\nimport * as fs from \"fs\"\n\n\nReactXnft.events.on(\"connect\", () => {\n  \n});\n\n\n// /=========================================================/\n/getBalance/\n// export function App() {\n//   useEffect(() => {\n//     (async () => {\n//       console.log(\n//         \"Solana balance\",\n//         await window.xnft.solana.connection.getBalance(\n//           window.xnft.solana.publicKey\n//         )\n//       );\n//       console.log(\n//         \"Ethereum balance\",\n//         (\n//           await window.xnft.ethereum.provider.getBalance(\n//             window.xnft.ethereum.publicKey\n//           )\n//         ).toString()\n//       );\n//     })();\n//   }, [])};\n\n// ===============================================================\n//Sign transfer tx\n\n// export function HomeScreen () {\n//   const solanaSignAndConfirmTx = async () => {\n//     const transaction = new Transaction().add(\n//       SystemProgram.transfer({\n//         fromPubkey: window.xnft.solana.publicKey,\n//         toPubkey: new PublicKey(\"3VHwVfYVibgWasVAAGX71DwTMnj3Zxn6ATir3ohsCGqP\"),\n//         lamports:1_000_000_000,\n//       })\n//     );\n//     try {\n//       const result = await window.xnft.solana.sendAndConfirm(transaction);\n//       console.log(\"Solana sign and confirm tx\" , result);\n//     } catch (e) {\n//       console.log(`Error while signing ${e}`);\n//     }\n//   };\n//   return (\n//     <View style={{ margin: \"24px\"}}>\n//       <Text >Hi Blockchain Guyes. Please Sign your message </Text>\n//       <Button style={{ width: \"75%\" }} onClick={solanaSignAndConfirmTx}>Sign Message</Button>\n//     </View>\n//   );\n// }\n\n// ===============================================================\n\n\n// import { BN } from \"@project-serum/anchor\";\n// import { atom } from \"recoil\";\n// import getAllxNFTs from \"../_utils/getAllXnfts\";\n// import { XnftWithMetadata } from \"../_types/XnftWithMetadata\";\n// import solanaConnectionAtom from \"./solanaConnectionAtom\";\n\n// const xnftAtom = atom<XnftWithMetadata[]>({\n//   key: \"xnftAtom\",\n//   effects: [\n//     ({ setSelf, getPromise }) => {\n//       const fetchAllXnfts = async () => {\n//         const xnfts = await getAllxNFTs(\n//           window.xnft.solana.connection,\n//           window.xnft.solana.publicKey\n//         );\n//         window.xnft.setStorage(\"xnfts\", JSON.stringify(xnfts));\n//         setSelf(xnfts);\n//       };\n\n//       window.xnft\n//         .getStorage(\"xnfts\")\n//         .then((cache) => {\n//           if (cache) {\n//             const xnfts: XnftWithMetadata[] = JSON.parse(cache);\n//             setSelf(rehydrate(xnfts));\n//           }\n//         })\n//         .then(() => getPromise(solanaConnectionAtom))\n//         .then(async () => {\n//           await fetchAllXnfts();\n//         });\n//     },\n//   ],\n// });\n\n// function rehydrate(xnfts: XnftWithMetadata[]): XnftWithMetadata[] {\n//   xnfts.forEach((xnft) => {\n//     xnft.account.createdTs = new BN(xnft.account.createdTs, 16);\n//     xnft.account.updatedTs = new BN(xnft.account.updatedTs, 16);\n//     xnft.account.totalInstalls = new BN(xnft.account.totalInstalls, 16);\n//     xnft.account.installPrice = new BN(xnft.account.installPrice, 16);\n//     xnft.account.totalRating = new BN(xnft.account.totalRating, 16);\n//   });\n//   return xnfts;\n// }\n\n// export default xnftAtom;\n\n\n//===========================================================================================\n\n\n// export function HomeScreen() {\n//   const onClick = () => {\n//     const degodsXnft = \"AM8TpkQaKnoiofQZrnBWhhbmUfrDo2kWJLLoNm2kybAW\";\n//     window.backpack.openXnft(degodsXnft);\n//   };\n//   return <button onClick={onClick}>Open xNFT</button>;\n// }\n\n\n// ============================================================================================\n\n\n\n\nconst ListAll = () => {\n  \n  const xKey = \"\";//enter your x api key here\n  const [wallID, setWallID] = useState(\"\");\n  const [network, setNetwork] = useState(\"devnet\");\n\n  const [isLoaded, setLoaded] = useState(false);\n  const [dataFetched, setDataFetched] = useState();\n\n  const [connStatus,setConnStatus] = useState(false);\n  \n  const solanaConnect = async () => {\n    console.log('clicked solana connect');\n    const { solana } = window;\n        if(!solana)\n        {\n            alert(\"Please Install Solana\");\n        }\n\n        try{  \n            //const network = \"devnet\";\n            const phantom = new PhantomWalletAdapter();\n            await phantom.connect();\n            const rpcUrl = clusterApiUrl(network);\n            const connection = new Connection(rpcUrl,\"confirmed\");\n            const wallet = {\n                address: backpack.publicKey.toString(),\n            };\n\n            if(wallet.address)\n            {\n                console.log(wallet.address);\n                setWallID(wallet.address);\n                const accountInfo = await connection.getAccountInfo(new PublicKey(wallet.address),\"confirmed\");\n                console.log(accountInfo);\n                setConnStatus(true);  \n            }\n        }\n        catch(err)\n        {\n            console.log(err);\n        }\n\n  }\n\n  const fetchNFTs = (e) => {\n    e.preventDefault();\n    //const val = ReadAllNFts.callNft(xKey,wallID,network,updAuth); // This is the code which is not working\n    \n    let nftUrl = `https://api.shyft.to/sol/v1/nft/read_all?network=${network}&address=${wallID}`;\n    axios({\n      // Endpoint to send files\n      url: nftUrl,\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\": xKey,\n      },\n      // Attaching the form data\n    })\n      // Handle the response from backend here\n      .then((res) => {\n        console.log(res.data);\n        setDataFetched(res.data);\n        setLoaded(true);\n      })\n\n      // Catch errors if any\n      .catch((err) => {\n        console.warn(err);\n      });\n  };\n  return (\n    <div className=\"grd-back\">\n      \n      <div className=\"container-lg\">\n        <div className=\"py-4 text-center\">\n          <h1>List All Your NFTs</h1>\n          <p>\n            This is a sample project which will list all your NFTs associated\n            with your wallet\n          </p>\n        </div>\n      </div>\n      \n      <div className=\"container-lg\">\n      {!connStatus && (<div className=\"card border border-light rounded py-3 px-5 w-50 bg-dark text-light mx-auto\">\n          <div className=\"card-body text-center\">\n            <h2 className=\"card-title p-2\">Connect Your Wallet</h2>\n            <p className=\"card-text p-1\">You need to connect your wallet to deploy and interact with your contracts.</p>\n            <button className=\"btn btn-light rounded-pill mt-5 px-3\" onClick={solanaConnect}>Connect Phantom Wallet</button>\n            {/* <select className=\"form-select\" onChange={(e) => {\n              console.log(e.target.value);\n              (e.target.value === 'mtmsk') ? mtmskConnect() : solanaConnect();\n            }}>\n              <option value=\"none\">Connect</option>\n              <option value=\"phntm\">Phantom</option>\n            </select> */}\n          </div>\n        </div>)}\n        {connStatus && (<div className=\"w-50 border border-light rounded-3 mx-auto bg-dark\">\n          <div className=\"form-container p-3\">\n            <form>\n              <div className=\"row d-flex justify-content-center\">\n                \n                <div className=\"col-12 p-2\">\n                  <select\n                    name=\"network\"\n                    className=\"form-control form-select\"\n                    id=\"\"\n                    onChange={(e) => setNetwork(e.target.value)}\n                  >\n                    <option value=\"devnet\">Devnet</option>\n                    <option value=\"testnet\">Testnet</option>\n                    <option value=\"mainnet-beta\">Mainnet Beta</option>\n                  </select>\n                </div>\n                <div className=\"col-12 p-2\">\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder=\"Enter Wallet Id\"\n                    value={wallID}\n                  />\n                </div>\n                \n              </div>\n              <div className=\"text-center p-3\">\n                <button\n                  className=\"button-24\"\n                  onClick={fetchNFTs}\n                >\n                  Get\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>)}\n      </div>\n\n      <div className=\"container-lg\">\n        <div className=\"cards-section py-4\">\n          <div className=\"row\">\n            {isLoaded &&\n              dataFetched.result.map((item) => (\n                <div className=\"col-xs-12 col-sm-3 p-3\" key={item.mint}>\n                  <div className=\"card nft-card bg-dark\">\n                    <div className=\"card-body\">\n                      <a href={`/get-details?token_address=${item.mint}&network=${network}`} target=\"_blank\" rel=\"noreferrer\">\n                        <img className=\"card-image img-fluid\" src={item.image_uri} alt=\"img\" />\n                      </a>\n                      <a href={`/get-details?token_address=${item.mint}&network=${network}`} target=\"_blank\" rel=\"noreferrer\">\n                        <h5>{item.name}</h5>\n                      </a>\n                      \n                    </div>\n                  </div>\n                </div>\n              ))}\n            \n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// export default ListAll;\n\n\n// =====================================\n\n\n// import { Metaplex, keypairIdentity } from \"@metaplex-foundation/js\";\n// import { Connection, clusterApiUrl, Keypair, PublicKey } from \"@solana/web3.js\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport React, { useCallback } from \"react\";\nimport { walletAdapterIdentity } from '@metaplex-foundation/js';\nimport { createContext, useContext } from 'react';\n\n\n\n\n\n\nexport const HomeScreen: FC = () => {\n  // const { connection } = useConnection();\n  const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n  // const keypair = window.xnft.solana.publicKey;\n  // const wallet = useWallet();\n  const bh =  window.backpack.connection.getLatestBlockhash();\n  console.log(\"got latest blockhash1\", bh);\n  const keypair = Keypair.fromSecretKey(\n    Uint8Array.from([76,136,189,77,118,217,252,31,90,170,9,127,109,163,161,210,167,247,16,201,199,166,211,239,158,170,35,184,84,215,133,141,245,87,98,122,163,187,139,227,236,74,116,161,179,154,157,101,62,146,104,163,216,106,241,247,6,197,163,221,57,96,207,22]));\n\n  \n  // const { metaplex } = useMetaplex();\n\n  console.log(\"got latest blockhash2\", bh);\n  const metaplex = new Metaplex(connection);\n  metaplex.use(keypairIdentity(keypair));\n\n  // const owner = window.xnft.solana.publicKey;\n  const owner = new PublicKey(\"HWiApthq473nmMRhkuQGWQhMztvR5oZnXazWWn2Hoksf\");\n\n  const [ allNFTs , setAllNFTs] = useState([]);\n  console.log(\"got latest blockhash3\", bh);\n  const fetchAllNFTs = async () => {\n    const data:any = await metaplex.nfts().findAllByOwner({owner});\n    console.log(data);\n    setAllNFTs(data);\n    console.log(\"got latest blockhash4\", bh);\n  }\n  \n\n  return (\n    <View style={{ margin: \"24px\"}}>\n      <Text >If you want to see your NFTs please Click on</Text>\n      <Button style={{ width: \"75%\" }} onClick={fetchAllNFTs}>My NFTs</Button>\n      {JSON.stringify(allNFTs)}\n      all\n    </View>\n  );\n}\n\n\n\n\n\n// =========================================\n\n\n\n// import type { FC } from \"react\";\n// import React, { useCallback } from \"react\";\n// import {\n//   createTransferCheckedInstruction,\n//   getAssociatedTokenAddress,\n// } from \"@solana/spl-token\";\n// import { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\n// import { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\n// import {\n//   Keypair,\n//   PublicKey,\n//   SystemProgram,\n//   Transaction,\n// } from \"@solana/web3.js\";\n\n// const USDC_MINT = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\n\n// export const SendAllButton: FC = () => {\n//   const { connection } = useConnection();\n//   const wallet = useWallet();\n//   const onClick = useCallback(async () => {\n//     if (!wallet.publicKey) throw new WalletNotConnectedError();\n//     //\n//     // Test the pass through connection works.\n//     //\n//     // @ts-ignore\n//     const bh = await window.backpack.connection.getLatestBlockhash();\n//     console.log(\"got latest blockhash\", bh);\n\n//     const toAccount = \"AqP1ABfSsRUBcgY3bwiDRB4kiBxgESUqCdcdDLMVSrWS\";\n//     const fromTokenAccount = await getAssociatedTokenAddress(\n//       USDC_MINT,\n//       new PublicKey(wallet.publicKey)\n//     );\n//     const toTokenAccount = await getAssociatedTokenAddress(\n//       USDC_MINT,\n//       new PublicKey(toAccount)\n//     );\n\n//     const transaction1 = new Transaction().add(\n//       SystemProgram.transfer({\n//         fromPubkey: wallet.publicKey,\n//         toPubkey: Keypair.generate().publicKey,\n//         lamports: 1000000,\n//       })\n//     );\n//     const transaction2 = new Transaction().add(\n//       SystemProgram.transfer({\n//         fromPubkey: wallet.publicKey,\n//         toPubkey: Keypair.generate().publicKey,\n//         lamports: 2000000,\n//       })\n//     );\n//     const transaction3 = new Transaction().add(\n//       createTransferCheckedInstruction(\n//         fromTokenAccount,\n//         USDC_MINT,\n//         toTokenAccount,\n//         wallet.publicKey,\n//         1,\n//         6\n//       )\n//     );\n\n//     console.log(\"sending transactions\", transaction1, transaction2);\n\n//     // @ts-ignore\n//     const { blockhash } = await window.backpack.connection.getLatestBlockhash();\n//     transaction1.recentBlockhash = blockhash;\n//     transaction2.recentBlockhash = blockhash;\n//     transaction3.recentBlockhash = blockhash;\n//     transaction1.feePayer = wallet.publicKey;\n//     transaction2.feePayer = wallet.publicKey;\n//     transaction3.feePayer = wallet.publicKey;\n\n//     const signedTxs = await wallet.signAllTransactions([\n//       transaction1,\n//       transaction2,\n//       transaction3,\n//     ]);\n\n//     console.log(\"signed\", signedTxs);\n//     /*\n//     await connection.confirmTransaction(\n//       {\n//         signature,\n//         blockhash,\n//         lastValidBlockHeight,\n//       },\n//       \"processed\"\n//     );\n//     */\n//   }, [wallet.publicKey, wallet.sendTransaction, connection]);\n\n//   return (\n//     <button onClick={onClick} disabled={!wallet.publicKey}>\n//       Send multiple transactions\n//     </button>\n//   );\n// };\n// ===================================================\n\n\n\n// import { walletAdapterIdentity } from '@metaplex-foundation/js';\n// // import { MetaplexContext } from './useMetaplex';\n// // import { useConnection, useWallet } from '@solana/wallet-adapter-react';\n// // import { useMemo } from 'react';\n\n\n// import { createContext, useContext } from 'react';\n\n// const DEFAULT_CONTEXT = {\n//   metaplex: null,\n// };\n\n// const MetaplexContext = createContext(DEFAULT_CONTEXT);\n\n// function useMetaplex() {\n//   return useContext(MetaplexContext);\n// }\n\n\n// export const MetaplexProvider = ({ children:any }) => {\n//   const { connection } = useConnection();\n//   const wallet = useWallet();\n\n//   const metaplex = useMemo(\n//     () => Metaplex.make(connection).use(walletAdapterIdentity(wallet)),\n//     [connection, wallet]\n//   );\n\n//   return (\n//     <MetaplexContext.Provider value={{ metaplex }}>\n//       {children}\n//     </MetaplexContext.Provider>\n//   )\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// ===================================================================\n// const endpoint = web3.clusterApiUrl('devnet')\n// const wallets = [new walletAdapterWallets.PhantomWalletAdapter()]\n\n// // export const Home: NextPage = (props) => {\n// //   const endpoint = web3.clusterApiUrl('devnet')\n// //   const wallet = new PhantomWalletAdapter()\n\n// //   return (\n// //       <ConnectionProvider endpoint={endpoint}>\n// //           <WalletProvider wallets={[wallet]}>\n// //               <p>Put the rest of your app here</p>\n// //           </WalletProvider>\n// //       </ConnectionProvider>\n// //   )\n// // }\n\n\n\n\n// const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n\n// ReactXnft.events.on(\"connect\", () => {\n  \n// });\n\n\n\n\n\n// export function HomeScreen() {\n//   const publicKey = usePublicKey()\n//   const toPubkey = new PublicKey(\"3VHwVfYVibgWasVAAGX71DwTMnj3Zxn6ATir3ohsCGqP\")\n//   const lamportsToSend = 1_000_000;\n\n//   const onClick = async () => {\n\n//     const tx = new Transaction().add(\n//       SystemProgram.transfer({\n//         fromPubkey: publicKey,\n//         toPubkey: toPubkey,\n//         lamports:lamportsToSend,\n//       })\n//     );\n//     await sendAndConfirmTransaction(connection, tx, [\n//       // publicKey,\n//     ]);\n//     console.log(sendAndConfirmTransaction);\n\n//   window.xnft.solana.signTransaction(\n\n//   )\n// };\n  \n// return (\n//   <View>\n//     <Text >Hi Blockchain Guyes.</Text>\n//     <Button onClick={onClick}>Sign your Message</Button>\n//   </View>\n//   );\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}