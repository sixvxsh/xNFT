{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useMemo } from \"react\";\nimport ReactXnft, { Button, Text, View } from \"react-xnft\";\nimport { useState } from \"react\";\nimport * as buffer from \"buffer\";\nwindow.Buffer = buffer.Buffer;\nimport { Metaplex } from \"@metaplex-foundation/js\";\nReactXnft.events.on(\"connect\", function () {});\n/getBalance/;\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport React from \"react\";\nimport { walletAdapterIdentity } from '@metaplex-foundation/js';\nimport { createContext, useContext } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DEFAULT_CONTEXT = {\n  metaplex: null\n};\nvar MetaplexContext = createContext(DEFAULT_CONTEXT);\nfunction useMetaplex() {\n  return useContext(MetaplexContext);\n}\nexport var HomeScreen = function HomeScreen() {\n  var _useConnection = useConnection(),\n    connection = _useConnection.connection;\n  var keypair = window.xnft.solana.publicKey;\n  var wallet = useWallet();\n  var bh = window.backpack.connection.getLatestBlockhash();\n  console.log(\"got latest blockhash\", bh);\n  var metaplex = useMemo(function () {\n    return Metaplex.make(connection).use(walletAdapterIdentity(wallet));\n  }, [connection, wallet]);\n  var owner = window.xnft.solana.publicKey;\n  ;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    allNFTs = _useState2[0],\n    setAllNFTs = _useState2[1];\n  var fetchAllNFTs = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var data = yield metaplex.nfts().findAllByOwner(owner);\n      console.log(data);\n      setAllNFTs(data);\n    });\n    return function fetchAllNFTs() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: {\n      margin: \"24px\"\n    },\n    children: [_jsx(Text, {\n      children: \"If you want see your NFTs please Click on\"\n    }), _jsx(Button, {\n      style: {\n        width: \"75%\"\n      },\n      onClick: fetchAllNFTs,\n      children: \"My NFTs\"\n    }), JSON.stringify(allNFTs)]\n  });\n};","map":{"version":3,"names":["useMemo","ReactXnft","Button","Text","View","useState","buffer","window","Buffer","Metaplex","events","on","useConnection","useWallet","React","walletAdapterIdentity","createContext","useContext","jsx","_jsx","jsxs","_jsxs","DEFAULT_CONTEXT","metaplex","MetaplexContext","useMetaplex","HomeScreen","_useConnection","connection","keypair","xnft","solana","publicKey","wallet","bh","backpack","getLatestBlockhash","console","log","make","use","owner","_useState","_useState2","_slicedToArray","allNFTs","setAllNFTs","fetchAllNFTs","_ref","_asyncToGenerator","data","nfts","findAllByOwner","apply","arguments","style","margin","children","width","onClick","JSON","stringify"],"sources":["/home/sixvxsh/Programming/blockchain/backpack/xnft-quickstart-final/src/screens/HomeScreen.tsx"],"sourcesContent":["// import { NextPage } from 'next'\nimport { FC, ReactNode } from \"react\"\nimport axios from \"axios\";\n\nimport {\n  TransactionMessage,\n  VersionedTransaction,\n  SystemProgram,\n  Transaction,\n  PublicKey,\n  Keypair,\n  sendAndConfirmTransaction,\n  Connection,\n  clusterApiUrl,\n} from \"@solana/web3.js\";\nimport { FlatList } from \"react-native\";\nimport tw from \"twrnc\";\nimport { useMemo } from \"react\";\nimport { BackpackWalletAdapter } from \"@solana/wallet-adapter-backpack\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { PhantomWalletAdapter } from \"@solana/wallet-adapter-phantom\";\nimport { Screen } from \"../components/Screen\";\nimport ReactXnft, { Button,  Text, View, usePublicKey } from \"react-xnft\";\n\nimport { useEffect, useState } from \"react\";\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react'\nimport * as buffer from \"buffer\";\nwindow.Buffer = buffer.Buffer;\n// ==================================\nimport {\n  Metaplex,\n  keypairIdentity,\n  bundlrStorage,\n  toMetaplexFile,\n  NftWithToken,\n  BigNumber,\n} from \"@metaplex-foundation/js\"\nimport * as fs from \"fs\"\n\n\nReactXnft.events.on(\"connect\", () => {\n  \n});\n\n\n// /=========================================================/\n/getBalance/\n// export function App() {\n//   useEffect(() => {\n//     (async () => {\n//       console.log(\n//         \"Solana balance\",\n//         await window.xnft.solana.connection.getBalance(\n//           window.xnft.solana.publicKey\n//         )\n//       );\n//       console.log(\n//         \"Ethereum balance\",\n//         (\n//           await window.xnft.ethereum.provider.getBalance(\n//             window.xnft.ethereum.publicKey\n//           )\n//         ).toString()\n//       );\n//     })();\n//   }, [])};\n\n// ===============================================================\n//Sign transfer tx\n\n// export function HomeScreen () {\n//   const solanaSignAndConfirmTx = async () => {\n//     const transaction = new Transaction().add(\n//       SystemProgram.transfer({\n//         fromPubkey: window.xnft.solana.publicKey,\n//         toPubkey: new PublicKey(\"3VHwVfYVibgWasVAAGX71DwTMnj3Zxn6ATir3ohsCGqP\"),\n//         lamports:1_000_000_000,\n//       })\n//     );\n//     try {\n//       const result = await window.xnft.solana.sendAndConfirm(transaction);\n//       console.log(\"Solana sign and confirm tx\" , result);\n//     } catch (e) {\n//       console.log(`Error while signing ${e}`);\n//     }\n//   };\n//   return (\n//     <View style={{ margin: \"24px\"}}>\n//       <Text >Hi Blockchain Guyes. Please Sign your message </Text>\n//       <Button style={{ width: \"75%\" }} onClick={solanaSignAndConfirmTx}>Sign Message</Button>\n//     </View>\n//   );\n// }\n\n// ===============================================================\n\n\n// import { BN } from \"@project-serum/anchor\";\n// import { atom } from \"recoil\";\n// import getAllxNFTs from \"../_utils/getAllXnfts\";\n// import { XnftWithMetadata } from \"../_types/XnftWithMetadata\";\n// import solanaConnectionAtom from \"./solanaConnectionAtom\";\n\n// const xnftAtom = atom<XnftWithMetadata[]>({\n//   key: \"xnftAtom\",\n//   effects: [\n//     ({ setSelf, getPromise }) => {\n//       const fetchAllXnfts = async () => {\n//         const xnfts = await getAllxNFTs(\n//           window.xnft.solana.connection,\n//           window.xnft.solana.publicKey\n//         );\n//         window.xnft.setStorage(\"xnfts\", JSON.stringify(xnfts));\n//         setSelf(xnfts);\n//       };\n\n//       window.xnft\n//         .getStorage(\"xnfts\")\n//         .then((cache) => {\n//           if (cache) {\n//             const xnfts: XnftWithMetadata[] = JSON.parse(cache);\n//             setSelf(rehydrate(xnfts));\n//           }\n//         })\n//         .then(() => getPromise(solanaConnectionAtom))\n//         .then(async () => {\n//           await fetchAllXnfts();\n//         });\n//     },\n//   ],\n// });\n\n// function rehydrate(xnfts: XnftWithMetadata[]): XnftWithMetadata[] {\n//   xnfts.forEach((xnft) => {\n//     xnft.account.createdTs = new BN(xnft.account.createdTs, 16);\n//     xnft.account.updatedTs = new BN(xnft.account.updatedTs, 16);\n//     xnft.account.totalInstalls = new BN(xnft.account.totalInstalls, 16);\n//     xnft.account.installPrice = new BN(xnft.account.installPrice, 16);\n//     xnft.account.totalRating = new BN(xnft.account.totalRating, 16);\n//   });\n//   return xnfts;\n// }\n\n// export default xnftAtom;\n\n\n//===========================================================================================\n\n\n// export function HomeScreen() {\n//   const onClick = () => {\n//     const degodsXnft = \"AM8TpkQaKnoiofQZrnBWhhbmUfrDo2kWJLLoNm2kybAW\";\n//     window.backpack.openXnft(degodsXnft);\n//   };\n//   return <button onClick={onClick}>Open xNFT</button>;\n// }\n\n\n// ============================================================================================\n\n\n\n\n// const ListAll = () => {\n  \n//   const xKey = \"\";//enter your x api key here\n//   const [wallID, setWallID] = useState(\"\");\n//   const [network, setNetwork] = useState(\"devnet\");\n\n//   const [isLoaded, setLoaded] = useState(false);\n//   const [dataFetched, setDataFetched] = useState();\n\n//   const [connStatus,setConnStatus] = useState(false);\n  \n//   const solanaConnect = async () => {\n//     console.log('clicked solana connect');\n//     const { solana } = window;\n//         if(!solana)\n//         {\n//             alert(\"Please Install Solana\");\n//         }\n\n//         try{  \n//             //const network = \"devnet\";\n//             const phantom = new PhantomWalletAdapter();\n//             await phantom.connect();\n//             const rpcUrl = clusterApiUrl(network);\n//             const connection = new Connection(rpcUrl,\"confirmed\");\n//             const wallet = {\n//                 address: backpack.publicKey.toString(),\n//             };\n\n//             if(wallet.address)\n//             {\n//                 console.log(wallet.address);\n//                 setWallID(wallet.address);\n//                 const accountInfo = await connection.getAccountInfo(new PublicKey(wallet.address),\"confirmed\");\n//                 console.log(accountInfo);\n//                 setConnStatus(true);  \n//             }\n//         }\n//         catch(err)\n//         {\n//             console.log(err);\n//         }\n\n//   }\n\n//   const fetchNFTs = (e) => {\n//     e.preventDefault();\n//     //const val = ReadAllNFts.callNft(xKey,wallID,network,updAuth); // This is the code which is not working\n    \n//     let nftUrl = `https://api.shyft.to/sol/v1/nft/read_all?network=${network}&address=${wallID}`;\n//     axios({\n//       // Endpoint to send files\n//       url: nftUrl,\n//       method: \"GET\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"x-api-key\": xKey,\n//       },\n//       // Attaching the form data\n//     })\n//       // Handle the response from backend here\n//       .then((res) => {\n//         console.log(res.data);\n//         setDataFetched(res.data);\n//         setLoaded(true);\n//       })\n\n//       // Catch errors if any\n//       .catch((err) => {\n//         console.warn(err);\n//       });\n//   };\n//   return (\n//     <div className=\"grd-back\">\n      \n//       <div className=\"container-lg\">\n//         <div className=\"py-4 text-center\">\n//           <h1>List All Your NFTs</h1>\n//           <p>\n//             This is a sample project which will list all your NFTs associated\n//             with your wallet\n//           </p>\n//         </div>\n//       </div>\n      \n//       <div className=\"container-lg\">\n//       {!connStatus && (<div className=\"card border border-light rounded py-3 px-5 w-50 bg-dark text-light mx-auto\">\n//           <div className=\"card-body text-center\">\n//             <h2 className=\"card-title p-2\">Connect Your Wallet</h2>\n//             <p className=\"card-text p-1\">You need to connect your wallet to deploy and interact with your contracts.</p>\n//             <button className=\"btn btn-light rounded-pill mt-5 px-3\" onClick={solanaConnect}>Connect Phantom Wallet</button>\n//             {/* <select className=\"form-select\" onChange={(e) => {\n//               console.log(e.target.value);\n//               (e.target.value === 'mtmsk') ? mtmskConnect() : solanaConnect();\n//             }}>\n//               <option value=\"none\">Connect</option>\n//               <option value=\"phntm\">Phantom</option>\n//             </select> */}\n//           </div>\n//         </div>)}\n//         {connStatus && (<div className=\"w-50 border border-light rounded-3 mx-auto bg-dark\">\n//           <div className=\"form-container p-3\">\n//             <form>\n//               <div className=\"row d-flex justify-content-center\">\n                \n//                 <div className=\"col-12 p-2\">\n//                   <select\n//                     name=\"network\"\n//                     className=\"form-control form-select\"\n//                     id=\"\"\n//                     onChange={(e) => setNetwork(e.target.value)}\n//                   >\n//                     <option value=\"devnet\">Devnet</option>\n//                     <option value=\"testnet\">Testnet</option>\n//                     <option value=\"mainnet-beta\">Mainnet Beta</option>\n//                   </select>\n//                 </div>\n//                 <div className=\"col-12 p-2\">\n//                   <input\n//                     type=\"text\"\n//                     className=\"form-control\"\n//                     placeholder=\"Enter Wallet Id\"\n//                     value={wallID}\n//                   />\n//                 </div>\n                \n//               </div>\n//               <div className=\"text-center p-3\">\n//                 <button\n//                   className=\"button-24\"\n//                   onClick={fetchNFTs}\n//                 >\n//                   Get\n//                 </button>\n//               </div>\n//             </form>\n//           </div>\n//         </div>)}\n//       </div>\n\n//       <div className=\"container-lg\">\n//         <div className=\"cards-section py-4\">\n//           <div className=\"row\">\n//             {isLoaded &&\n//               dataFetched.result.map((item) => (\n//                 <div className=\"col-xs-12 col-sm-3 p-3\" key={item.mint}>\n//                   <div className=\"card nft-card bg-dark\">\n//                     <div className=\"card-body\">\n//                       <a href={`/get-details?token_address=${item.mint}&network=${network}`} target=\"_blank\" rel=\"noreferrer\">\n//                         <img className=\"card-image img-fluid\" src={item.image_uri} alt=\"img\" />\n//                       </a>\n//                       <a href={`/get-details?token_address=${item.mint}&network=${network}`} target=\"_blank\" rel=\"noreferrer\">\n//                         <h5>{item.name}</h5>\n//                       </a>\n                      \n//                     </div>\n//                   </div>\n//                 </div>\n//               ))}\n            \n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ListAll;\n\n\n// =====================================\n\n\n// import { Metaplex, keypairIdentity } from \"@metaplex-foundation/js\";\n// import { Connection, clusterApiUrl, Keypair, PublicKey } from \"@solana/web3.js\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport React, { useCallback } from \"react\";\nimport { walletAdapterIdentity } from '@metaplex-foundation/js';\nimport { createContext, useContext } from 'react';\n\n\n\n\nconst DEFAULT_CONTEXT = {\n  metaplex: null,\n};\n\nconst MetaplexContext = createContext(DEFAULT_CONTEXT);\n\nfunction useMetaplex() {\n  return useContext(MetaplexContext);\n}\n\n\nexport const HomeScreen: FC = () => {\n  const { connection } = useConnection();\n  // const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n  const keypair = window.xnft.solana.publicKey;\n  const wallet = useWallet();\n  const bh =  window.backpack.connection.getLatestBlockhash();\n  console.log(\"got latest blockhash\", bh);\n\n  const metaplex = useMemo(\n    () => Metaplex.make(connection).use(walletAdapterIdentity(wallet)),\n    [connection, wallet]\n  );\n\n  // const metaplex = new Metaplex(connection);\n  // metaplex.use(keypairIdentity(keypair));\n\n  const owner = window.xnft.solana.publicKey;;\n\n  const [ allNFTs , setAllNFTs] = useState([])\n\n  const fetchAllNFTs = async () => {\n    const data:any = await metaplex.nfts().findAllByOwner(owner);\n    console.log(data);\n    setAllNFTs(data);\n  }\n  \n\n  return (\n    <View style={{ margin: \"24px\"}}>\n      <Text >If you want see your NFTs please Click on</Text>\n      <Button style={{ width: \"75%\" }} onClick={fetchAllNFTs}>My NFTs</Button>\n      {JSON.stringify(allNFTs)}\n    </View>\n  );\n}\n\n\n\n\n\n// =========================================\n\n\n\n// import type { FC } from \"react\";\n// import React, { useCallback } from \"react\";\n// import {\n//   createTransferCheckedInstruction,\n//   getAssociatedTokenAddress,\n// } from \"@solana/spl-token\";\n// import { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\n// import { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\n// import {\n//   Keypair,\n//   PublicKey,\n//   SystemProgram,\n//   Transaction,\n// } from \"@solana/web3.js\";\n\n// const USDC_MINT = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\n\n// export const SendAllButton: FC = () => {\n//   const { connection } = useConnection();\n//   const wallet = useWallet();\n//   const onClick = useCallback(async () => {\n//     if (!wallet.publicKey) throw new WalletNotConnectedError();\n//     //\n//     // Test the pass through connection works.\n//     //\n//     // @ts-ignore\n//     const bh = await window.backpack.connection.getLatestBlockhash();\n//     console.log(\"got latest blockhash\", bh);\n\n//     const toAccount = \"AqP1ABfSsRUBcgY3bwiDRB4kiBxgESUqCdcdDLMVSrWS\";\n//     const fromTokenAccount = await getAssociatedTokenAddress(\n//       USDC_MINT,\n//       new PublicKey(wallet.publicKey)\n//     );\n//     const toTokenAccount = await getAssociatedTokenAddress(\n//       USDC_MINT,\n//       new PublicKey(toAccount)\n//     );\n\n//     const transaction1 = new Transaction().add(\n//       SystemProgram.transfer({\n//         fromPubkey: wallet.publicKey,\n//         toPubkey: Keypair.generate().publicKey,\n//         lamports: 1000000,\n//       })\n//     );\n//     const transaction2 = new Transaction().add(\n//       SystemProgram.transfer({\n//         fromPubkey: wallet.publicKey,\n//         toPubkey: Keypair.generate().publicKey,\n//         lamports: 2000000,\n//       })\n//     );\n//     const transaction3 = new Transaction().add(\n//       createTransferCheckedInstruction(\n//         fromTokenAccount,\n//         USDC_MINT,\n//         toTokenAccount,\n//         wallet.publicKey,\n//         1,\n//         6\n//       )\n//     );\n\n//     console.log(\"sending transactions\", transaction1, transaction2);\n\n//     // @ts-ignore\n//     const { blockhash } = await window.backpack.connection.getLatestBlockhash();\n//     transaction1.recentBlockhash = blockhash;\n//     transaction2.recentBlockhash = blockhash;\n//     transaction3.recentBlockhash = blockhash;\n//     transaction1.feePayer = wallet.publicKey;\n//     transaction2.feePayer = wallet.publicKey;\n//     transaction3.feePayer = wallet.publicKey;\n\n//     const signedTxs = await wallet.signAllTransactions([\n//       transaction1,\n//       transaction2,\n//       transaction3,\n//     ]);\n\n//     console.log(\"signed\", signedTxs);\n//     /*\n//     await connection.confirmTransaction(\n//       {\n//         signature,\n//         blockhash,\n//         lastValidBlockHeight,\n//       },\n//       \"processed\"\n//     );\n//     */\n//   }, [wallet.publicKey, wallet.sendTransaction, connection]);\n\n//   return (\n//     <button onClick={onClick} disabled={!wallet.publicKey}>\n//       Send multiple transactions\n//     </button>\n//   );\n// };\n// ===================================================\n\n\n\n// import { walletAdapterIdentity } from '@metaplex-foundation/js';\n// // import { MetaplexContext } from './useMetaplex';\n// // import { useConnection, useWallet } from '@solana/wallet-adapter-react';\n// // import { useMemo } from 'react';\n\n\n// import { createContext, useContext } from 'react';\n\n// const DEFAULT_CONTEXT = {\n//   metaplex: null,\n// };\n\n// const MetaplexContext = createContext(DEFAULT_CONTEXT);\n\n// function useMetaplex() {\n//   return useContext(MetaplexContext);\n// }\n\n\n// export const MetaplexProvider = ({ children:any }) => {\n//   const { connection } = useConnection();\n//   const wallet = useWallet();\n\n//   const metaplex = useMemo(\n//     () => Metaplex.make(connection).use(walletAdapterIdentity(wallet)),\n//     [connection, wallet]\n//   );\n\n//   return (\n//     <MetaplexContext.Provider value={{ metaplex }}>\n//       {children}\n//     </MetaplexContext.Provider>\n//   )\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// ===================================================================\n// const endpoint = web3.clusterApiUrl('devnet')\n// const wallets = [new walletAdapterWallets.PhantomWalletAdapter()]\n\n// // export const Home: NextPage = (props) => {\n// //   const endpoint = web3.clusterApiUrl('devnet')\n// //   const wallet = new PhantomWalletAdapter()\n\n// //   return (\n// //       <ConnectionProvider endpoint={endpoint}>\n// //           <WalletProvider wallets={[wallet]}>\n// //               <p>Put the rest of your app here</p>\n// //           </WalletProvider>\n// //       </ConnectionProvider>\n// //   )\n// // }\n\n\n\n\n// const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n\n// ReactXnft.events.on(\"connect\", () => {\n  \n// });\n\n\n\n\n\n// export function HomeScreen() {\n//   const publicKey = usePublicKey()\n//   const toPubkey = new PublicKey(\"3VHwVfYVibgWasVAAGX71DwTMnj3Zxn6ATir3ohsCGqP\")\n//   const lamportsToSend = 1_000_000;\n\n//   const onClick = async () => {\n\n//     const tx = new Transaction().add(\n//       SystemProgram.transfer({\n//         fromPubkey: publicKey,\n//         toPubkey: toPubkey,\n//         lamports:lamportsToSend,\n//       })\n//     );\n//     await sendAndConfirmTransaction(connection, tx, [\n//       // publicKey,\n//     ]);\n//     console.log(sendAndConfirmTransaction);\n\n//   window.xnft.solana.signTransaction(\n\n//   )\n// };\n  \n// return (\n//   <View>\n//     <Text >Hi Blockchain Guyes.</Text>\n//     <Button onClick={onClick}>Sign your Message</Button>\n//   </View>\n//   );\n// }\n"],"mappings":";;AAiBA,SAASA,OAAO,QAAQ,OAAO;AAK/B,OAAOC,SAAS,IAAIC,MAAM,EAAGC,IAAI,EAAEC,IAAI,QAAsB,YAAY;AAEzE,SAAoBC,QAAQ,QAAQ,OAAO;AAE3C,OAAO,KAAKC,MAAM,MAAM,QAAQ;AAChCC,MAAM,CAACC,MAAM,GAAGF,MAAM,CAACE,MAAM;AAE7B,SACEC,QAAQ,QAMH,yBAAyB;AAIhCR,SAAS,CAACS,MAAM,CAACC,EAAE,CAAC,SAAS,EAAE,YAAM,CAErC,CAAC,CAAC;AAIF,YAAY;AAoSZ,SAASC,aAAa,EAAEC,SAAS,QAAQ,8BAA8B;AACvE,OAAOC,KAAK,MAAuB,OAAO;AAC1C,SAASC,qBAAqB,QAAQ,yBAAyB;AAC/D,SAASC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAKlD,IAAMC,eAAe,GAAG;EACtBC,QAAQ,EAAE;AACZ,CAAC;AAED,IAAMC,eAAe,GAAGR,aAAa,CAACM,eAAe,CAAC;AAEtD,SAASG,WAAWA,CAAA,EAAG;EACrB,OAAOR,UAAU,CAACO,eAAe,CAAC;AACpC;AAGA,OAAO,IAAME,UAAc,GAAG,SAAjBA,UAAcA,CAAA,EAAS;EAClC,IAAAC,cAAA,GAAuBf,aAAa,EAAE;IAA9BgB,UAAU,GAAAD,cAAA,CAAVC,UAAU;EAElB,IAAMC,OAAO,GAAGtB,MAAM,CAACuB,IAAI,CAACC,MAAM,CAACC,SAAS;EAC5C,IAAMC,MAAM,GAAGpB,SAAS,EAAE;EAC1B,IAAMqB,EAAE,GAAI3B,MAAM,CAAC4B,QAAQ,CAACP,UAAU,CAACQ,kBAAkB,EAAE;EAC3DC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEJ,EAAE,CAAC;EAEvC,IAAMX,QAAQ,GAAGvB,OAAO,CACtB;IAAA,OAAMS,QAAQ,CAAC8B,IAAI,CAACX,UAAU,CAAC,CAACY,GAAG,CAACzB,qBAAqB,CAACkB,MAAM,CAAC,CAAC;EAAA,GAClE,CAACL,UAAU,EAAEK,MAAM,CAAC,CACrB;EAKD,IAAMQ,KAAK,GAAGlC,MAAM,CAACuB,IAAI,CAACC,MAAM,CAACC,SAAS;EAAC;EAE3C,IAAAU,SAAA,GAAgCrC,QAAQ,CAAC,EAAE,CAAC;IAAAsC,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAApCG,OAAO,GAAAF,UAAA;IAAGG,UAAU,GAAAH,UAAA;EAE5B,IAAMI,YAAY;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;MAC/B,IAAMC,IAAQ,SAAS3B,QAAQ,CAAC4B,IAAI,EAAE,CAACC,cAAc,CAACX,KAAK,CAAC;MAC5DJ,OAAO,CAACC,GAAG,CAACY,IAAI,CAAC;MACjBJ,UAAU,CAACI,IAAI,CAAC;IAClB,CAAC;IAAA,gBAJKH,YAAYA,CAAA;MAAA,OAAAC,IAAA,CAAAK,KAAA,OAAAC,SAAA;IAAA;EAAA,GAIjB;EAGD,OACEjC,KAAA,CAACjB,IAAI;IAACmD,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAM,CAAE;IAAAC,QAAA,GAC7BtC,IAAA,CAAChB,IAAI;MAAAsD,QAAA,EAAE;IAAyC,EAAO,EACvDtC,IAAA,CAACjB,MAAM;MAACqD,KAAK,EAAE;QAAEG,KAAK,EAAE;MAAM,CAAE;MAACC,OAAO,EAAEZ,YAAa;MAAAU,QAAA,EAAC;IAAO,EAAS,EACvEG,IAAI,CAACC,SAAS,CAAChB,OAAO,CAAC;EAAA,EACnB;AAEX,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}