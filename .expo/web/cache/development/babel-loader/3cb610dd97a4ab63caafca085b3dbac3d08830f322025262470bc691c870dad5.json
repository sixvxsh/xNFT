{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { PublicKey, Keypair, Connection, clusterApiUrl } from \"@solana/web3.js\";\nimport ReactXnft, { Button, Text, View } from \"react-xnft\";\nimport { useState } from \"react\";\nimport * as buffer from \"buffer\";\nwindow.Buffer = buffer.Buffer;\nimport { Metaplex, keypairIdentity } from \"@metaplex-foundation/js\";\nReactXnft.events.on(\"connect\", function () {});\n/getBalance/;\nimport React from \"react\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport var HomeScreen = function HomeScreen() {\n  var connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n  var bh = window.backpack.connection.getLatestBlockhash();\n  console.log(\"step1: got latest blockhash \", bh);\n  var keypair = Keypair.fromSecretKey(Uint8Array.from([76, 136, 189, 77, 118, 217, 252, 31, 90, 170, 9, 127, 109, 163, 161, 210, 167, 247, 16, 201, 199, 166, 211, 239, 158, 170, 35, 184, 84, 215, 133, 141, 245, 87, 98, 122, 163, 187, 139, 227, 236, 74, 116, 161, 179, 154, 157, 101, 62, 146, 104, 163, 216, 106, 241, 247, 6, 197, 163, 221, 57, 96, 207, 22]));\n  var metaplex = new Metaplex(connection);\n  metaplex.use(keypairIdentity(keypair));\n  console.log(\"step2 keypair has set up \");\n  var owner = new PublicKey(\"HWiApthq473nmMRhkuQGWQhMztvR5oZnXazWWn2Hoksf\");\n  console.log(\"step3: before invoke fetchAllNFTs\");\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    nft = _useState2[0],\n    setNft = _useState2[1];\n  var fetchAllNFTs = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var dataArray = yield metaplex.nfts().findAllByOwner({\n        owner: owner\n      });\n      console.log('find All nfts object ByOwner in an array fetchAllNfts func', dataArray);\n      var loadedNfts = [];\n      for (var i = 0; i < dataArray.length; i++) {\n        var loadnft = yield metaplex.nfts().load({\n          metadata: dataArray[i]\n        });\n        console.log(\"each nft obj loaded\", loadnft);\n        loadedNfts.push(loadnft);\n      }\n      ;\n      console.log(\"each object nft pushed in an array\", loadedNfts);\n      setNft(loadedNfts.map(function (nft) {\n        return _jsxs(_Fragment, {\n          children: [_jsxs(Text, {\n            children: [\" \", nft.json.name, \" \"]\n          }), _jsx(I, {\n            style: {\n              borderRadius: \"6px\",\n              width: \"157.5px\"\n            }\n          })]\n        });\n      }));\n      console.log('setNft used and mapping occured in fetchAllNfts func');\n    });\n    return function fetchAllNFTs() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: {\n      margin: \"24px\"\n    },\n    children: [_jsx(Text, {\n      children: \"If you want to see your NFTs please Click on\"\n    }), _jsx(Button, {\n      style: {\n        width: \"75%\"\n      },\n      onClick: fetchAllNFTs,\n      children: \"My NFTs\"\n    }), nft[0], nft[1], nft[2], nft[3], nft[4], nft[5], nft[6], nft[7], nft[8], nft[9], nft[10]]\n  });\n};\nexport default HomeScreen;","map":{"version":3,"names":["PublicKey","Keypair","Connection","clusterApiUrl","ReactXnft","Button","Text","View","useState","buffer","window","Buffer","Metaplex","keypairIdentity","events","on","React","jsxs","_jsxs","jsx","_jsx","Fragment","_Fragment","HomeScreen","connection","bh","backpack","getLatestBlockhash","console","log","keypair","fromSecretKey","Uint8Array","from","metaplex","use","owner","_useState","_useState2","_slicedToArray","nft","setNft","fetchAllNFTs","_ref","_asyncToGenerator","dataArray","nfts","findAllByOwner","loadedNfts","i","length","loadnft","load","metadata","push","map","children","json","name","I","style","borderRadius","width","apply","arguments","margin","onClick"],"sources":["/home/sixvxsh/Programming/blockchain/backpack/xnft-quickstart-final/src/screens/HomeScreen.tsx"],"sourcesContent":["// import { NextPage } from 'next'\nimport { FC, ReactNode } from \"react\"\nimport axios from \"axios\";\n\nimport {\n  TransactionMessage,\n  VersionedTransaction,\n  SystemProgram,\n  Transaction,\n  PublicKey,\n  Keypair,\n  sendAndConfirmTransaction,\n  Connection,\n  clusterApiUrl,\n} from \"@solana/web3.js\";\nimport { FlatList } from \"react-native\";\nimport tw from \"twrnc\";\nimport { useMemo } from \"react\";\nimport { BackpackWalletAdapter } from \"@solana/wallet-adapter-backpack\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { PhantomWalletAdapter } from \"@solana/wallet-adapter-phantom\";\nimport { Screen } from \"../components/Screen\";\nimport ReactXnft, { Button,  Image,  Text, TextField, View, usePublicKey } from \"react-xnft\";\n\nimport { useEffect, useState } from \"react\";\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react'\nimport * as buffer from \"buffer\";\nwindow.Buffer = buffer.Buffer;\n// ==================================\nimport {\n  Metaplex,\n  keypairIdentity,\n  bundlrStorage,\n  toMetaplexFile,\n  NftWithToken,\n  BigNumber,\n} from \"@metaplex-foundation/js\"\nimport * as fs from \"fs\"\n\n\nReactXnft.events.on(\"connect\", () => {\n  \n});\n\n\n// /=========================================================/\n/getBalance/\n// export function App() {\n//   useEffect(() => {\n//     (async () => {\n//       console.log(\n//         \"Solana balance\",\n//         await window.xnft.solana.connection.getBalance(\n//           window.xnft.solana.publicKey\n//         )\n//       );\n//       console.log(\n//         \"Ethereum balance\",\n//         (\n//           await window.xnft.ethereum.provider.getBalance(\n//             window.xnft.ethereum.publicKey\n//           )\n//         ).toString()\n//       );\n//     })();\n//   }, [])};\n\n// ===============================================================\n//Sign transfer tx\n\n// export function HomeScreen () {\n//   const solanaSignAndConfirmTx = async () => {\n//     const transaction = new Transaction().add(\n//       SystemProgram.transfer({\n//         fromPubkey: window.xnft.solana.publicKey,\n//         toPubkey: new PublicKey(\"3VHwVfYVibgWasVAAGX71DwTMnj3Zxn6ATir3ohsCGqP\"),\n//         lamports:1_000_000_000,\n//       })\n//     );\n//     try {\n//       const result = await window.xnft.solana.sendAndConfirm(transaction);\n//       console.log(\"Solana sign and confirm tx\" , result);\n//     } catch (e) {\n//       console.log(`Error while signing ${e}`);\n//     }\n//   };\n//   return (\n//     <View style={{ margin: \"24px\"}}>\n//       <Text >Hi Blockchain Guyes. Please Sign your message </Text>\n//       <Button style={{ width: \"75%\" }} onClick={solanaSignAndConfirmTx}>Sign Message</Button>\n//     </View>\n//   );\n// }\n\n// ===============================================================\n\n\n// import { BN } from \"@project-serum/anchor\";\n// import { atom } from \"recoil\";\n// import getAllxNFTs from \"../_utils/getAllXnfts\";\n// import { XnftWithMetadata } from \"../_types/XnftWithMetadata\";\n// import solanaConnectionAtom from \"./solanaConnectionAtom\";\n\n// const xnftAtom = atom<XnftWithMetadata[]>({\n//   key: \"xnftAtom\",\n//   effects: [\n//     ({ setSelf, getPromise }) => {\n//       const fetchAllXnfts = async () => {\n//         const xnfts = await getAllxNFTs(\n//           window.xnft.solana.connection,\n//           window.xnft.solana.publicKey\n//         );\n//         window.xnft.setStorage(\"xnfts\", JSON.stringify(xnfts));\n//         setSelf(xnfts);\n//       };\n\n//       window.xnft\n//         .getStorage(\"xnfts\")\n//         .then((cache) => {\n//           if (cache) {\n//             const xnfts: XnftWithMetadata[] = JSON.parse(cache);\n//             setSelf(rehydrate(xnfts));\n//           }\n//         })\n//         .then(() => getPromise(solanaConnectionAtom))\n//         .then(async () => {\n//           await fetchAllXnfts();\n//         });\n//     },\n//   ],\n// });\n\n// function rehydrate(xnfts: XnftWithMetadata[]): XnftWithMetadata[] {\n//   xnfts.forEach((xnft) => {\n//     xnft.account.createdTs = new BN(xnft.account.createdTs, 16);\n//     xnft.account.updatedTs = new BN(xnft.account.updatedTs, 16);\n//     xnft.account.totalInstalls = new BN(xnft.account.totalInstalls, 16);\n//     xnft.account.installPrice = new BN(xnft.account.installPrice, 16);\n//     xnft.account.totalRating = new BN(xnft.account.totalRating, 16);\n//   });\n//   return xnfts;\n// }\n\n// export default xnftAtom;\n\n\n//===========================================================================================\n\n\n// export function HomeScreen() {\n//   const onClick = () => {\n//     const degodsXnft = \"AM8TpkQaKnoiofQZrnBWhhbmUfrDo2kWJLLoNm2kybAW\";\n//     window.backpack.openXnft(degodsXnft);\n//   };\n//   return <button onClick={onClick}>Open xNFT</button>;\n// }\n\n\n// ============================================================================================\n\n\n\n\n// const ListAll = () => {\n  \n//   const xKey = \"\";//enter your x api key here\n//   const [wallID, setWallID] = useState(\"\");\n//   const [network, setNetwork] = useState(\"devnet\");\n\n//   const [isLoaded, setLoaded] = useState(false);\n//   const [dataFetched, setDataFetched] = useState();\n\n//   const [connStatus,setConnStatus] = useState(false);\n  \n//   const solanaConnect = async () => {\n//     console.log('clicked solana connect');\n//     const { solana } = window;\n//         if(!solana)\n//         {\n//             alert(\"Please Install Solana\");\n//         }\n\n//         try{  \n//             //const network = \"devnet\";\n//             const phantom = new PhantomWalletAdapter();\n//             await phantom.connect();\n//             const rpcUrl = clusterApiUrl(network);\n//             const connection = new Connection(rpcUrl,\"confirmed\");\n//             const wallet = {\n//                 address: backpack.publicKey.toString(),\n//             };\n\n//             if(wallet.address)\n//             {\n//                 console.log(wallet.address);\n//                 setWallID(wallet.address);\n//                 const accountInfo = await connection.getAccountInfo(new PublicKey(wallet.address),\"confirmed\");\n//                 console.log(accountInfo);\n//                 setConnStatus(true);  \n//             }\n//         }\n//         catch(err)\n//         {\n//             console.log(err);\n//         }\n\n//   }\n\n//   const fetchNFTs = (e) => {\n//     e.preventDefault();\n//     //const val = ReadAllNFts.callNft(xKey,wallID,network,updAuth); // This is the code which is not working\n    \n//     let nftUrl = `https://api.shyft.to/sol/v1/nft/read_all?network=${network}&address=${wallID}`;\n//     axios({\n//       // Endpoint to send files\n//       url: nftUrl,\n//       method: \"GET\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"x-api-key\": xKey,\n//       },\n//       // Attaching the form data\n//     })\n//       // Handle the response from backend here\n//       .then((res) => {\n//         console.log(res.data);\n//         setDataFetched(res.data);\n//         setLoaded(true);\n//       })\n\n//       // Catch errors if any\n//       .catch((err) => {\n//         console.warn(err);\n//       });\n//   };\n//   return (\n//     <div className=\"grd-back\">\n      \n//       <div className=\"container-lg\">\n//         <div className=\"py-4 text-center\">\n//           <h1>List All Your NFTs</h1>\n//           <p>\n//             This is a sample project which will list all your NFTs associated\n//             with your wallet\n//           </p>\n//         </div>\n//       </div>\n      \n//       <div className=\"container-lg\">\n//       {!connStatus && (<div className=\"card border border-light rounded py-3 px-5 w-50 bg-dark text-light mx-auto\">\n//           <div className=\"card-body text-center\">\n//             <h2 className=\"card-title p-2\">Connect Your Wallet</h2>\n//             <p className=\"card-text p-1\">You need to connect your wallet to deploy and interact with your contracts.</p>\n//             <button className=\"btn btn-light rounded-pill mt-5 px-3\" onClick={solanaConnect}>Connect Phantom Wallet</button>\n//             {/* <select className=\"form-select\" onChange={(e) => {\n//               console.log(e.target.value);\n//               (e.target.value === 'mtmsk') ? mtmskConnect() : solanaConnect();\n//             }}>\n//               <option value=\"none\">Connect</option>\n//               <option value=\"phntm\">Phantom</option>\n//             </select> */}\n//           </div>\n//         </div>)}\n//         {connStatus && (<div className=\"w-50 border border-light rounded-3 mx-auto bg-dark\">\n//           <div className=\"form-container p-3\">\n//             <form>\n//               <div className=\"row d-flex justify-content-center\">\n                \n//                 <div className=\"col-12 p-2\">\n//                   <select\n//                     name=\"network\"\n//                     className=\"form-control form-select\"\n//                     id=\"\"\n//                     onChange={(e) => setNetwork(e.target.value)}\n//                   >\n//                     <option value=\"devnet\">Devnet</option>\n//                     <option value=\"testnet\">Testnet</option>\n//                     <option value=\"mainnet-beta\">Mainnet Beta</option>\n//                   </select>\n//                 </div>\n//                 <div className=\"col-12 p-2\">\n//                   <input\n//                     type=\"text\"\n//                     className=\"form-control\"\n//                     placeholder=\"Enter Wallet Id\"\n//                     value={wallID}\n//                   />\n//                 </div>\n                \n//               </div>\n//               <div className=\"text-center p-3\">\n//                 <button\n//                   className=\"button-24\"\n//                   onClick={fetchNFTs}\n//                 >\n//                   Get\n//                 </button>\n//               </div>\n//             </form>\n//           </div>\n//         </div>)}\n//       </div>\n\n//       <div className=\"container-lg\">\n//         <div className=\"cards-section py-4\">\n//           <div className=\"row\">\n//             {isLoaded &&\n//               dataFetched.result.map((item) => (\n//                 <div className=\"col-xs-12 col-sm-3 p-3\" key={item.mint}>\n//                   <div className=\"card nft-card bg-dark\">\n//                     <div className=\"card-body\">\n//                       <a href={`/get-details?token_address=${item.mint}&network=${network}`} target=\"_blank\" rel=\"noreferrer\">\n//                         <img className=\"card-image img-fluid\" src={item.image_uri} alt=\"img\" />\n//                       </a>\n//                       <a href={`/get-details?token_address=${item.mint}&network=${network}`} target=\"_blank\" rel=\"noreferrer\">\n//                         <h5>{item.name}</h5>\n//                       </a>\n                      \n//                     </div>\n//                   </div>\n//                 </div>\n//               ))}\n            \n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ListAll;\n\n\n// =========================================================\n\n\n// import { Metaplex, keypairIdentity } from \"@metaplex-foundation/js\";\n// import { Connection, clusterApiUrl, Keypair, PublicKey } from \"@solana/web3.js\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport React, { useCallback } from \"react\";\nimport { walletAdapterIdentity } from '@metaplex-foundation/js';\nimport { createContext, useContext } from 'react';\nimport { TextInput } from \"react-native-gesture-handler\";\n\n\n\n//gpt snippet\n\n\n\n\n\n// export const HomeScreen: FC = () => {\n//   const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n//   const keypair = Keypair.fromSecretKey(\n//     Uint8Array.from([76,136,189,77,118,217,252,31,90,170,9,127,109,163,161,210,167,247,16,201,199,166,211,239,158,170,35,184,84,215,133,141,245,87,98,122,163,187,139,227,236,74,116,161,179,154,157,101,62,146,104,163,216,106,241,247,6,197,163,221,57,96,207,22])\n//   );\n//   const metaplex = new Metaplex(connection);\n//   metaplex.use(keypairIdentity(keypair));\n//   const owner = new PublicKey(\"HWiApthq473nmMRhkuQGWQhMztvR5oZnXazWWn2Hoksf\");\n  \n//   const [nft, setNft] = useState<any[]>([]);\n  \n//   const fetchAllNFTs = async () => {\n//     const dataArray: any = await metaplex.nfts().findAllByOwner({ owner });\n    \n//     console.log('Find all nfts object ByOwner in an array fetchAllNfts func', dataArray);\n//     let loadedNfts: any[] = [];\n\n//     for(let i = 0; i < dataArray.length; i++) {\n//       const loadnft = await metaplex.nfts().load({ metadata: dataArray[i] });\n//       console.log(\"Each nft obj loaded\", loadnft);\n//       loadedNfts.push(loadnft);\n//     };\n//     console.log(\"Each object nft pushed in an array\", loadedNfts);\n//     setNft(loadedNfts);\n//     console.log('setNft used and mapping occured in fetchAllNfts func');\n//   };\n\n//   return (\n//     <View style={{ margin: \"24px\"}}>\n//       <Text >If you want to see your NFTs please Click on</Text>\n//       <Button style={{ width: \"75%\" }} onClick={fetchAllNFTs}>My NFTs</Button>\n//       {nft.map((nft: any) => (\n//         <View key={nft.pubkey.toString()}>\n//           <Text> {nft.json.name} </Text>\n//           <Text> {nft.json.model} </Text>\n//           <Image\n//             style={{\n//               borderRadius: \"6px\",\n//               width: \"157.5px\",\n//               height: \"157.5px\",\n//             }}\n//             src={{ uri: nft.json.image.uri }}\n//           />\n//         </View>\n//       ))}\n//     </View>\n//   );\n// };\n\n// export default HomeScreen;\n\n\n\n\n\n\n\n\n\n// ==========================================================================================\n\n\n//  my snippet code\n\n\nexport const HomeScreen: FC = () => {\n  // const { connection } = useConnection();\n  const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n  // const keypair = window.xnft.solana.publicKey;\n  // const wallet = useWallet();\n  const bh =  window.backpack.connection.getLatestBlockhash();\n  console.log(\"step1: got latest blockhash \", bh);\n  const keypair = Keypair.fromSecretKey(\n    Uint8Array.from([76,136,189,77,118,217,252,31,90,170,9,127,109,163,161,210,167,247,16,201,199,166,211,239,158,170,35,184,84,215,133,141,245,87,98,122,163,187,139,227,236,74,116,161,179,154,157,101,62,146,104,163,216,106,241,247,6,197,163,221,57,96,207,22]));\n\n  \n  // const { metaplex } = useMetaplex();\n\n  \n  const metaplex = new Metaplex(connection);\n  metaplex.use(keypairIdentity(keypair));\n  console.log(\"step2 keypair has set up \");\n  // const owner = window.xnft.solana.publicKey;\n  const owner = new PublicKey(\"HWiApthq473nmMRhkuQGWQhMztvR5oZnXazWWn2Hoksf\");\n\n      \n  console.log(\"step3: before invoke fetchAllNFTs\");\n\n  const [ nft , setNft] = useState<any[]>([]);\n  \n  const fetchAllNFTs = async () => {\n    const dataArray:any = await metaplex.nfts().findAllByOwner({owner});\n    \n    console.log('find All nfts object ByOwner in an array fetchAllNfts func', dataArray);\n    let loadedNfts: any[] = [];\n\n    for(let i = 0; i < dataArray.length; i++) {\n      const loadnft = await metaplex.nfts().load({ metadata: dataArray[i] });\n      console.log(\"each nft obj loaded\", loadnft);\n      loadedNfts.push(loadnft);\n    };\n      console.log(\"each object nft pushed in an array\", loadedNfts);\n      setNft(loadedNfts.map((nft: any) => {\n        return (\n          <>\n          <Text> {nft.json.name} </Text>\n          {/* <Text> {nft.json.model} </Text> */}\n          {/* <Image src={\"https://storage.googleapis.com/fractal-launchpad-public-assets/honeyland/passes/Platinum_Pass.gif\"} */}\n          <I\n            style={{\n              borderRadius: \"6px\",\n              width: \"157.5px\",\n            }}\n           />\n          </>\n        )\n      }));\n    console.log('setNft used and mapping occured in fetchAllNfts func');\n  };\n\n\n  return (\n    <View style={{ margin: \"24px\"}}>\n      <Text >If you want to see your NFTs please Click on</Text>\n      <Button style={{ width: \"75%\" }} onClick={fetchAllNFTs}>My NFTs</Button>\n    {nft[0]}\n    {nft[1]}\n    {nft[2]}\n    {nft[3]}\n    {nft[4]}\n    {nft[5]}\n    {nft[6]}\n    {nft[7]}\n    {nft[8]}\n    {nft[9]}\n    {nft[10]}\n    {/* <Image src={\"https://storage.googleapis.com/fractal-launchpad-public-assets/honeyland/passes/Platinum_Pass.gif\"} /> */}\n    {/* <Image  \"url(https://user-images.githubusercontent.com/6990215/180327248-61e7675e-490b-4bdf-8588-370aa008302a.png)\", */}\n    </View>\n  );\n};\n\n\n// return (\n  //   <View style={{ margin: \"24px\"}}>\n  //     <Text>If you want to see your NFTs please Click on</Text>\n  //     <Button style={{ width: \"75%\" }} onClick={fetchAllNFTs}>My NFTs</Button>\n  //     {nft.map((item, index) => (\n  //       <View key={index}>\n  //         <Text>{item.json.name}</Text>\n  //         <Text>{item.json.model}</Text>\n  //         <Image\n  //           src={\"https://storage.googleapis.com/fractal-launchpad-public-assets/honeyland/passes/Platinum_Pass.gif\"}\n  //           style={{\n  //             borderRadius: \"6px\",\n  //             width: \"157.5px\",\n  //           }}\n  //         />\n  //       </View>\n  //     ))}\n  //   </View>\n  // );\n\n\n\n\n\nexport default HomeScreen;\n\n// =========================================\n\n\n// import { useState } from \"react\";\n// import { Connection, Keypair, PublicKey } from \"@solana/web3.js\";\n// import { Metaplex, keypairIdentity } from \"@metaplex/js\";\n// import { Button, Text, View } from \"react-native\";\n\n// const HomeScreen = () => {\n//   const [allNFTs, setAllNFTs] = useState([]);\n//   const connection = new Connection(\"https://devnet.solana.com\", \"confirmed\");\n//   const keypair = Keypair.fromSecretKey(Uint8Array.from([my-secret]));\n\n//   const metaplex = new Metaplex(connection);\n//   metaplex.use(keypairIdentity(keypair));\n\n//   const owner = new PublicKey(\"HWiApthq473nmMRhkuQGWQhMztvR5oZnXazWWn2Hoksf\");\n\n//   const fetchAllNFTs = async () => {\n//     const data = await metaplex.nfts().findAllByOwner({ owner });\n//     setAllNFTs(data);\n//   };\n\n\n\n\n// =========================================\n\n\n\n// import type { FC } from \"react\";\n// import React, { useCallback } from \"react\";\n// import {\n//   createTransferCheckedInstruction,\n//   getAssociatedTokenAddress,\n// } from \"@solana/spl-token\";\n// import { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\n// import { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\n// import {\n//   Keypair,\n//   PublicKey,\n//   SystemProgram,\n//   Transaction,\n// } from \"@solana/web3.js\";\n\n// const USDC_MINT = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\n\n// export const SendAllButton: FC = () => {\n//   const { connection } = useConnection();\n//   const wallet = useWallet();\n//   const onClick = useCallback(async () => {\n//     if (!wallet.publicKey) throw new WalletNotConnectedError();\n//     //\n//     // Test the pass through connection works.\n//     //\n//     // @ts-ignore\n//     const bh = await window.backpack.connection.getLatestBlockhash();\n//     console.log(\"got latest blockhash\", bh);\n\n//     const toAccount = \"AqP1ABfSsRUBcgY3bwiDRB4kiBxgESUqCdcdDLMVSrWS\";\n//     const fromTokenAccount = await getAssociatedTokenAddress(\n//       USDC_MINT,\n//       new PublicKey(wallet.publicKey)\n//     );\n//     const toTokenAccount = await getAssociatedTokenAddress(\n//       USDC_MINT,\n//       new PublicKey(toAccount)\n//     );\n\n//     const transaction1 = new Transaction().add(\n//       SystemProgram.transfer({\n//         fromPubkey: wallet.publicKey,\n//         toPubkey: Keypair.generate().publicKey,\n//         lamports: 1000000,\n//       })\n//     );\n//     const transaction2 = new Transaction().add(\n//       SystemProgram.transfer({\n//         fromPubkey: wallet.publicKey,\n//         toPubkey: Keypair.generate().publicKey,\n//         lamports: 2000000,\n//       })\n//     );\n//     const transaction3 = new Transaction().add(\n//       createTransferCheckedInstruction(\n//         fromTokenAccount,\n//         USDC_MINT,\n//         toTokenAccount,\n//         wallet.publicKey,\n//         1,\n//         6\n//       )\n//     );\n\n//     console.log(\"sending transactions\", transaction1, transaction2);\n\n//     // @ts-ignore\n//     const { blockhash } = await window.backpack.connection.getLatestBlockhash();\n//     transaction1.recentBlockhash = blockhash;\n//     transaction2.recentBlockhash = blockhash;\n//     transaction3.recentBlockhash = blockhash;\n//     transaction1.feePayer = wallet.publicKey;\n//     transaction2.feePayer = wallet.publicKey;\n//     transaction3.feePayer = wallet.publicKey;\n\n//     const signedTxs = await wallet.signAllTransactions([\n//       transaction1,\n//       transaction2,\n//       transaction3,\n//     ]);\n\n//     console.log(\"signed\", signedTxs);\n//     /*\n//     await connection.confirmTransaction(\n//       {\n//         signature,\n//         blockhash,\n//         lastValidBlockHeight,\n//       },\n//       \"processed\"\n//     );\n//     */\n//   }, [wallet.publicKey, wallet.sendTransaction, connection]);\n\n//   return (\n//     <button onClick={onClick} disabled={!wallet.publicKey}>\n//       Send multiple transactions\n//     </button>\n//   );\n// };\n// ===================================================\n\n\n\n// import { walletAdapterIdentity } from '@metaplex-foundation/js';\n// // import { MetaplexContext } from './useMetaplex';\n// // import { useConnection, useWallet } from '@solana/wallet-adapter-react';\n// // import { useMemo } from 'react';\n\n\n// import { createContext, useContext } from 'react';\n\n// const DEFAULT_CONTEXT = {\n//   metaplex: null,\n// };\n\n// const MetaplexContext = createContext(DEFAULT_CONTEXT);\n\n// function useMetaplex() {\n//   return useContext(MetaplexContext);\n// }\n\n\n// export const MetaplexProvider = ({ children:any }) => {\n//   const { connection } = useConnection();\n//   const wallet = useWallet();\n\n//   const metaplex = useMemo(\n//     () => Metaplex.make(connection).use(walletAdapterIdentity(wallet)),\n//     [connection, wallet]\n//   );\n\n//   return (\n//     <MetaplexContext.Provider value={{ metaplex }}>\n//       {children}\n//     </MetaplexContext.Provider>\n//   )\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// ===================================================================\n// const endpoint = web3.clusterApiUrl('devnet')\n// const wallets = [new walletAdapterWallets.PhantomWalletAdapter()]\n\n// // export const Home: NextPage = (props) => {\n// //   const endpoint = web3.clusterApiUrl('devnet')\n// //   const wallet = new PhantomWalletAdapter()\n\n// //   return (\n// //       <ConnectionProvider endpoint={endpoint}>\n// //           <WalletProvider wallets={[wallet]}>\n// //               <p>Put the rest of your app here</p>\n// //           </WalletProvider>\n// //       </ConnectionProvider>\n// //   )\n// // }\n\n\n\n\n// const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n\n// ReactXnft.events.on(\"connect\", () => {\n  \n// });\n\n\n\n\n\n// export function HomeScreen() {\n//   const publicKey = usePublicKey()\n//   const toPubkey = new PublicKey(\"3VHwVfYVibgWasVAAGX71DwTMnj3Zxn6ATir3ohsCGqP\")\n//   const lamportsToSend = 1_000_000;\n\n//   const onClick = async () => {\n\n//     const tx = new Transaction().add(\n//       SystemProgram.transfer({\n//         fromPubkey: publicKey,\n//         toPubkey: toPubkey,\n//         lamports:lamportsToSend,\n//       })\n//     );\n//     await sendAndConfirmTransaction(connection, tx, [\n//       // publicKey,\n//     ]);\n//     console.log(sendAndConfirmTransaction);\n\n//   window.xnft.solana.signTransaction(\n\n//   )\n// };\n  \n// return (\n//   <View>\n//     <Text >Hi Blockchain Guyes.</Text>\n//     <Button onClick={onClick}>Sign your Message</Button>\n//   </View>\n//   );\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}