{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { SystemProgram, Transaction, PublicKey } from \"@solana/web3.js\";\nimport ReactXnft, { Button, Text, View } from \"react-xnft\";\nimport * as buffer from \"buffer\";\nwindow.Buffer = buffer.Buffer;\nReactXnft.events.on(\"connect\", function () {});\n/getBalance/;\nexport function HomeScreen() {\n  var solanaSignAndConfirmTx = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var transaction = new Transaction().add(SystemProgram.transfer({\n        fromPubkey: window.xnft.solana.publicKey,\n        toPubkey: new PublicKey(\"3VHwVfYVibgWasVAAGX71DwTMnj3Zxn6ATir3ohsCGqP\"),\n        lamports: 1_000_000_000\n      }));\n      try {\n        var result = yield window.xnft.solana.sendAndConfirm(transaction);\n        console.log(\"Solana sign and confirm tx\", result);\n      } catch (e) {\n        console.log(\"Error while signing \" + e);\n      }\n    });\n    return function solanaSignAndConfirmTx() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: {\n      margin: \"24px\"\n    },\n    children: [_jsx(Text, {\n      children: \"Hi Blockchain Guyes. Please Sign your message \"\n    }), _jsx(Button, {\n      style: {\n        width: \"75%\"\n      },\n      onClick: solanaSignAndConfirmTx,\n      children: \"Sign Message\"\n    })]\n  });\n}\nimport { BN } from \"@project-serum/anchor\";\nimport { atom } from \"recoil\";\nimport getAllxNFTs from \"../_utils/getAllXnfts\";\nimport solanaConnectionAtom from \"./solanaConnectionAtom\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar xnftAtom = atom({\n  key: \"xnftAtom\",\n  effects: [function (_ref2) {\n    var setSelf = _ref2.setSelf,\n      getPromise = _ref2.getPromise;\n    var fetchAllXnfts = function () {\n      var _ref3 = _asyncToGenerator(function* () {\n        var xnfts = yield getAllxNFTs(window.xnft.solana.connection, window.xnft.solana.publicKey);\n        window.xnft.setStorage(\"xnfts\", JSON.stringify(xnfts));\n        setSelf(xnfts);\n      });\n      return function fetchAllXnfts() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    window.xnft.getStorage(\"xnfts\").then(function (cache) {\n      if (cache) {\n        var xnfts = JSON.parse(cache);\n        setSelf(rehydrate(xnfts));\n      }\n    }).then(function () {\n      return getPromise(solanaConnectionAtom);\n    }).then(_asyncToGenerator(function* () {\n      yield fetchAllXnfts();\n    }));\n  }]\n});\nfunction rehydrate(xnfts) {\n  xnfts.forEach(function (xnft) {\n    xnft.account.createdTs = new BN(xnft.account.createdTs, 16);\n    xnft.account.updatedTs = new BN(xnft.account.updatedTs, 16);\n    xnft.account.totalInstalls = new BN(xnft.account.totalInstalls, 16);\n    xnft.account.installPrice = new BN(xnft.account.installPrice, 16);\n    xnft.account.totalRating = new BN(xnft.account.totalRating, 16);\n  });\n  return xnfts;\n}\nexport default xnftAtom;","map":{"version":3,"names":["SystemProgram","Transaction","PublicKey","ReactXnft","Button","Text","View","buffer","window","Buffer","events","on","HomeScreen","solanaSignAndConfirmTx","_ref","_asyncToGenerator","transaction","add","transfer","fromPubkey","xnft","solana","publicKey","toPubkey","lamports","result","sendAndConfirm","console","log","e","apply","arguments","_jsxs","style","margin","children","_jsx","width","onClick","BN","atom","getAllxNFTs","solanaConnectionAtom","jsx","jsxs","xnftAtom","key","effects","_ref2","setSelf","getPromise","fetchAllXnfts","_ref3","xnfts","connection","setStorage","JSON","stringify","getStorage","then","cache","parse","rehydrate","forEach","account","createdTs","updatedTs","totalInstalls","installPrice","totalRating"],"sources":["/home/sixvxsh/Programming/blockchain/backpack/xnft-quickstart-final/src/screens/HomeScreen.tsx"],"sourcesContent":["// import { NextPage } from 'next'\nimport { FC, ReactNode } from \"react\"\n\n\nimport {\n  TransactionMessage,\n  VersionedTransaction,\n  SystemProgram,\n  Transaction,\n  PublicKey,\n  Keypair,\n  sendAndConfirmTransaction,\n  Connection,\n  clusterApiUrl,\n} from \"@solana/web3.js\";\nimport { FlatList } from \"react-native\";\nimport tw from \"twrnc\";\n\nimport { Screen } from \"../components/Screen\";\nimport ReactXnft, { Button,  Text, View, usePublicKey } from \"react-xnft\";\n\nimport { useEffect, useState } from \"react\";\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react'\nimport * as buffer from \"buffer\";\nwindow.Buffer = buffer.Buffer;\n// ==================================\nimport {\n  Metaplex,\n  keypairIdentity,\n  bundlrStorage,\n  toMetaplexFile,\n  NftWithToken,\n  BigNumber,\n} from \"@metaplex-foundation/js\"\nimport * as fs from \"fs\"\n\n\nReactXnft.events.on(\"connect\", () => {\n  \n});\n\n\n// /=========================================================/\n/getBalance/\n// export function App() {\n//   useEffect(() => {\n//     (async () => {\n//       console.log(\n//         \"Solana balance\",\n//         await window.xnft.solana.connection.getBalance(\n//           window.xnft.solana.publicKey\n//         )\n//       );\n//       console.log(\n//         \"Ethereum balance\",\n//         (\n//           await window.xnft.ethereum.provider.getBalance(\n//             window.xnft.ethereum.publicKey\n//           )\n//         ).toString()\n//       );\n//     })();\n//   }, [])};\n\n// ===============================================================\n//Sign transfer tx\nexport function HomeScreen () {\n  const solanaSignAndConfirmTx = async () => {\n    const transaction = new Transaction().add(\n      SystemProgram.transfer({\n        fromPubkey: window.xnft.solana.publicKey,\n        toPubkey: new PublicKey(\"3VHwVfYVibgWasVAAGX71DwTMnj3Zxn6ATir3ohsCGqP\"),\n        lamports:1_000_000_000,\n      })\n    );\n    try {\n      const result = await window.xnft.solana.sendAndConfirm(transaction);\n      console.log(\"Solana sign and confirm tx\" , result);\n    } catch (e) {\n      console.log(`Error while signing ${e}`);\n    }\n  };\n  return (\n    <View style={{ margin: \"24px\"}}>\n      <Text >Hi Blockchain Guyes. Please Sign your message </Text>\n      <Button style={{ width: \"75%\" }} onClick={solanaSignAndConfirmTx}>Sign Message</Button>\n    </View>\n  );\n}\n\n// ===============================================================\n\n\nimport { BN } from \"@project-serum/anchor\";\nimport { atom } from \"recoil\";\nimport getAllxNFTs from \"../_utils/getAllXnfts\";\nimport { XnftWithMetadata } from \"../_types/XnftWithMetadata\";\nimport solanaConnectionAtom from \"./solanaConnectionAtom\";\n\nconst xnftAtom = atom<XnftWithMetadata[]>({\n  key: \"xnftAtom\",\n  effects: [\n    ({ setSelf, getPromise }) => {\n      const fetchAllXnfts = async () => {\n        const xnfts = await getAllxNFTs(\n          window.xnft.solana.connection,\n          window.xnft.solana.publicKey\n        );\n        window.xnft.setStorage(\"xnfts\", JSON.stringify(xnfts));\n        setSelf(xnfts);\n      };\n\n      window.xnft\n        .getStorage(\"xnfts\")\n        .then((cache) => {\n          if (cache) {\n            const xnfts: XnftWithMetadata[] = JSON.parse(cache);\n            setSelf(rehydrate(xnfts));\n          }\n        })\n        .then(() => getPromise(solanaConnectionAtom))\n        .then(async () => {\n          await fetchAllXnfts();\n        });\n    },\n  ],\n});\n\nfunction rehydrate(xnfts: XnftWithMetadata[]): XnftWithMetadata[] {\n  xnfts.forEach((xnft) => {\n    xnft.account.createdTs = new BN(xnft.account.createdTs, 16);\n    xnft.account.updatedTs = new BN(xnft.account.updatedTs, 16);\n    xnft.account.totalInstalls = new BN(xnft.account.totalInstalls, 16);\n    xnft.account.installPrice = new BN(xnft.account.installPrice, 16);\n    xnft.account.totalRating = new BN(xnft.account.totalRating, 16);\n  });\n  return xnfts;\n}\n\nexport default xnftAtom;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const endpoint = web3.clusterApiUrl('devnet')\n// const wallets = [new walletAdapterWallets.PhantomWalletAdapter()]\n\n// // export const Home: NextPage = (props) => {\n// //   const endpoint = web3.clusterApiUrl('devnet')\n// //   const wallet = new PhantomWalletAdapter()\n\n// //   return (\n// //       <ConnectionProvider endpoint={endpoint}>\n// //           <WalletProvider wallets={[wallet]}>\n// //               <p>Put the rest of your app here</p>\n// //           </WalletProvider>\n// //       </ConnectionProvider>\n// //   )\n// // }\n\n\n\n\n// const connection = new Connection(clusterApiUrl(\"devnet\"), \"confirmed\");\n\n// ReactXnft.events.on(\"connect\", () => {\n  \n// });\n\n\n\n\n\n// export function HomeScreen() {\n//   const publicKey = usePublicKey()\n//   const toPubkey = new PublicKey(\"3VHwVfYVibgWasVAAGX71DwTMnj3Zxn6ATir3ohsCGqP\")\n//   const lamportsToSend = 1_000_000;\n\n//   const onClick = async () => {\n\n//     const tx = new Transaction().add(\n//       SystemProgram.transfer({\n//         fromPubkey: publicKey,\n//         toPubkey: toPubkey,\n//         lamports:lamportsToSend,\n//       })\n//     );\n//     await sendAndConfirmTransaction(connection, tx, [\n//       // publicKey,\n//     ]);\n//     console.log(sendAndConfirmTransaction);\n\n//   window.xnft.solana.signTransaction(\n\n//   )\n// };\n  \n// return (\n//   <View>\n//     <Text >Hi Blockchain Guyes.</Text>\n//     <Button onClick={onClick}>Sign your Message</Button>\n//   </View>\n//   );\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}