{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _templateObject;\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport tw from \"twrnc\";\nimport { Screen } from \"../components/Screen\";\nimport ReactXnft, { Text, usePublicKey } from \"react-xnft\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nReactXnft.events.on(\"connect\", function () {});\nexport function HomeScreen() {\n  var features = [\"tailwind\", \"recoil\", \"native styling\", \"fetching code from an API\", \"using a FlatList to render data\", \"Image for both remote & local images\", \"custom fonts\", \"sign a transaction / message\", \"theme hook with light/dark support\"];\n  var publicKey = usePublicKey();\n  var onClick = function onClick() {\n    window.xnft.solana.signMessage(Buffer.from(\"Hello\"));\n  };\n  return _jsxs(Screen, {\n    children: [_jsx(Text, {\n      style: tw(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"mb-4\"]))),\n      children: \"You'll find several examples of how to build xNFTs using react-native:\"\n    }), _jsx(FlatList, {\n      data: features,\n      keyExtractor: function keyExtractor(item) {\n        return item;\n      },\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsxs(Text, {\n          children: [\"- \", item]\n        });\n      }\n    })]\n  });\n}","map":{"version":3,"names":["tw","Screen","ReactXnft","Text","usePublicKey","jsx","_jsx","jsxs","_jsxs","events","on","HomeScreen","features","publicKey","onClick","window","xnft","solana","signMessage","Buffer","from","children","style","_templateObject","_taggedTemplateLiteralLoose","FlatList","data","keyExtractor","item","renderItem","_ref"],"sources":["/home/sixvxsh/Programming/blockchain/backpack/xnft-quickstart/src/screens/HomeScreen.tsx"],"sourcesContent":["import {  FlatList } from \"react-native\";\nimport tw from \"twrnc\";\n\nimport { Screen } from \"../components/Screen\";\nimport ReactXnft, { Button, Text, View, usePublicKey } from \"react-xnft\";\n\n  \n\n\nReactXnft.events.on(\"connect\", () => {\n  \n});\n  \nexport function HomeScreen() {\n  \n  const features = [\n    \"tailwind\",\n    \"recoil\",\n    \"native styling\",\n    \"fetching code from an API\",\n    \"using a FlatList to render data\",\n    \"Image for both remote & local images\",\n    \"custom fonts\",\n    \"sign a transaction / message\",\n    \"theme hook with light/dark support\",\n  ];\n  \n  const publicKey = usePublicKey()\n  \n  const onClick = () => {\n  window.xnft.solana.signMessage(Buffer.from(\"Hello\"))\n  }\n  \n \n  return (\n    <Screen>\n      <Text style={tw`mb-4`}>\n        You'll find several examples of how to build xNFTs using react-native:\n      </Text>\n      <FlatList\n        data={features}\n        keyExtractor={(item) => item}\n        renderItem={({ item }) => <Text>- {item}</Text>}\n      />\n    </Screen>\n  );\n  }\n\n\n\n\n\n\n\n \n\n\n\n//   return (\n//     <View>\n//       <Text>\n//         Hi Blockchain Guyes!- Please Sign your message\n//       </Text>\n//       <Button onClick={onClick}> Sign</Button>\n//     </View>\n      \n//   );\n// }"],"mappings":";;;AACA,OAAOA,EAAE,MAAM,OAAO;AAEtB,SAASC,MAAM;AACf,OAAOC,SAAS,IAAYC,IAAI,EAAQC,YAAY,QAAQ,YAAY;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAKzEN,SAAS,CAACO,MAAM,CAACC,EAAE,CAAC,SAAS,EAAE,YAAM,CAErC,CAAC,CAAC;AAEF,OAAO,SAASC,UAAUA,CAAA,EAAG;EAE3B,IAAMC,QAAQ,GAAG,CACf,UAAU,EACV,QAAQ,EACR,gBAAgB,EAChB,2BAA2B,EAC3B,iCAAiC,EACjC,sCAAsC,EACtC,cAAc,EACd,8BAA8B,EAC9B,oCAAoC,CACrC;EAED,IAAMC,SAAS,GAAGT,YAAY,EAAE;EAEhC,IAAMU,OAAO,GAAG,SAAVA,OAAOA,CAAA,EAAS;IACtBC,MAAM,CAACC,IAAI,CAACC,MAAM,CAACC,WAAW,CAACC,MAAM,CAACC,IAAI,CAAC,OAAO,CAAC,CAAC;EACpD,CAAC;EAGD,OACEZ,KAAA,CAACP,MAAM;IAAAoB,QAAA,GACLf,IAAA,CAACH,IAAI;MAACmB,KAAK,EAAEtB,EAAE,CAAAuB,eAAA,KAAAA,eAAA,GAAAC,2BAAA,YAAO;MAAAH,QAAA,EAAC;IAEvB,EAAO,EACPf,IAAA,CAACmB,QAAQ;MACPC,IAAI,EAAEd,QAAS;MACfe,YAAY,EAAE,SAAAA,aAACC,IAAI;QAAA,OAAKA,IAAI;MAAA,CAAC;MAC7BC,UAAU,EAAE,SAAAA,WAAAC,IAAA;QAAA,IAAGF,IAAI,GAAAE,IAAA,CAAJF,IAAI;QAAA,OAAOpB,KAAA,CAACL,IAAI;UAAAkB,QAAA,GAAC,IAAE,EAACO,IAAI;QAAA,EAAQ;MAAA;IAAC,EAChD;EAAA,EACK;AAEX"},"metadata":{},"sourceType":"module","externalDependencies":[]}