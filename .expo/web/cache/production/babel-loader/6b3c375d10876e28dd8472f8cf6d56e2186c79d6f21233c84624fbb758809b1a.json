{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"enabled\"],_excluded2=[\"enabled\",\"active\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import View from\"react-native-web/dist/exports/View\";var Screens;try{Screens=require('react-native-screens');}catch(e){}export var MaybeScreenContainer=function MaybeScreenContainer(_ref){var enabled=_ref.enabled,rest=_objectWithoutProperties(_ref,_excluded);if(Screens!=null){return React.createElement(Screens.ScreenContainer,_extends({enabled:enabled},rest));}return React.createElement(View,rest);};export var MaybeScreen=function MaybeScreen(_ref2){var enabled=_ref2.enabled,active=_ref2.active,rest=_objectWithoutProperties(_ref2,_excluded2);if(Screens!=null){return React.createElement(Screens.Screen,_extends({enabled:enabled,activityState:active},rest));}return React.createElement(View,rest);};","map":{"version":3,"names":["React","View","Screens","require","e","MaybeScreenContainer","_ref","enabled","rest","_objectWithoutProperties","_excluded","createElement","ScreenContainer","_extends","MaybeScreen","_ref2","active","_excluded2","Screen","activityState"],"sources":["/home/sixvxsh/Programming/blockchain/backpack/xnft-quickstart-final/node_modules/@react-navigation/stack/lib/module/views/Screens.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, ViewProps } from 'react-native';\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (Screens != null) {\n    return <Screens.ScreenContainer enabled={enabled} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nexport const MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: 0 | 1 | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (Screens != null) {\n    return (\n      <Screens.Screen enabled={enabled} activityState={active} {...rest} />\n    );\n  }\n\n  return <View {...rest} />;\n};\n"],"mappings":"saAAA,MAAO,GAAK,CAAAA,KAAZ,KAAuB,OAAvB,QAAAC,IAAA,0CAGA,GAAI,CAAAC,OAAJ,CAEA,GAAI,CACFA,OAAO,CAAGC,OAAO,CAAC,sBAAD,CAAjB,CACD,CAAC,MAAOC,CAAP,CAAU,CAEX,CAED,MAAO,IAAM,CAAAC,oBAAoB,CAAG,QAAvB,CAAAA,oBAAoBA,CAAGC,IAAA,CAM9B,IALJ,CAAAC,OADmC,CAM/BD,IAAA,CALJC,OADmC,CAEhCC,IAAA,CAAAC,wBAAA,CAICH,IAAA,CAAAI,SAAA,EACJ,GAAIR,OAAO,EAAI,IAAf,CAAqB,CACnB,MAAO,CAAAF,KAAA,CAAAW,aAAA,CAACT,OAAD,CAASU,eAAT,CAAAC,QAAA,EAAyBN,OAAO,CAAEA,OAAlC,EAA+CC,IAA/C,EAAP,CACD,CAED,MAAO,CAAAR,KAAA,CAAAW,aAAA,CAACV,IAAD,CAAUO,IAAV,CAAP,CACD,CAZM,CAcP,MAAO,IAAM,CAAAM,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAGC,KAAA,CAQrB,IAPJ,CAAAR,OAD0B,CAQtBQ,KAAA,CAPJR,OAD0B,CAE1BS,MAF0B,CAQtBD,KAAA,CANJC,MAF0B,CAGvBR,IAAA,CAAAC,wBAAA,CAKCM,KAAA,CAAAE,UAAA,EACJ,GAAIf,OAAO,EAAI,IAAf,CAAqB,CACnB,MACE,CAAAF,KAAA,CAAAW,aAAA,CAACT,OAAD,CAASgB,MAAT,CAAAL,QAAA,EAAgBN,OAAO,CAAEA,OAAzB,CAAkCY,aAAa,CAAEH,MAAjD,EAA6DR,IAA7D,EADF,CAGD,CAED,MAAO,CAAAR,KAAA,CAAAW,aAAA,CAACV,IAAD,CAAUO,IAAV,CAAP,CACD,CAhBM"},"metadata":{},"sourceType":"module","externalDependencies":[]}