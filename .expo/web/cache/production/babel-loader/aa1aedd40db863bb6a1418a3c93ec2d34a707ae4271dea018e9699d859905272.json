{"ast":null,"code":"import{CurrentRenderContext}from'@react-navigation/core';import*as React from'react';import ServerContext from\"./ServerContext\";export default React.forwardRef(function ServerContainer(_ref,ref){var children=_ref.children,location=_ref.location;React.useEffect(function(){console.error(\"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\");},[]);var current={};if(ref){var value={getCurrentOptions:function getCurrentOptions(){return current.options;}};if(typeof ref==='function'){ref(value);}else{ref.current=value;}}return React.createElement(ServerContext.Provider,{value:{location:location}},React.createElement(CurrentRenderContext.Provider,{value:current},children));});","map":{"version":3,"names":["CurrentRenderContext","React","ServerContext","forwardRef","ServerContainer","_ref","ref","children","location","useEffect","console","error","current","value","getCurrentOptions","options","createElement","Provider"],"sources":["/home/sixvxsh/Programming/blockchain/backpack/xnft-quickstart-final/node_modules/@react-navigation/native/lib/module/ServerContainer.tsx"],"sourcesContent":["import { CurrentRenderContext } from '@react-navigation/core';\nimport * as React from 'react';\n\nimport ServerContext, { ServerContextType } from './ServerContext';\nimport type { ServerContainerRef } from './types';\n\ntype Props = ServerContextType & {\n  children: React.ReactNode;\n};\n\n/**\n * Container component for server rendering.\n *\n * @param props.location Location object to base the initial URL for SSR.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which contains helper methods.\n */\nexport default React.forwardRef(function ServerContainer(\n  { children, location }: Props,\n  ref: React.Ref<ServerContainerRef>\n) {\n  React.useEffect(() => {\n    console.error(\n      \"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\"\n    );\n  }, []);\n\n  const current: { options?: object } = {};\n\n  if (ref) {\n    const value = {\n      getCurrentOptions() {\n        return current.options;\n      },\n    };\n\n    // We write to the `ref` during render instead of `React.useImperativeHandle`\n    // This is because `useImperativeHandle` will update the ref after 'commit',\n    // and there's no 'commit' phase during SSR.\n    // Mutating ref during render is unsafe in concurrent mode, but we don't care about it for SSR.\n    if (typeof ref === 'function') {\n      ref(value);\n    } else {\n      // @ts-expect-error: the TS types are incorrect and say that ref.current is readonly\n      ref.current = value;\n    }\n  }\n\n  return (\n    <ServerContext.Provider value={{ location }}>\n      <CurrentRenderContext.Provider value={current}>\n        {children}\n      </CurrentRenderContext.Provider>\n    </ServerContext.Provider>\n  );\n});\n"],"mappings":"AAAA,OAASA,oBAAT,KAAqC,wBAArC,CACA,MAAO,GAAK,CAAAC,KAAZ,KAAuB,OAAvB,CAEA,MAAO,CAAAC,aAAP,uBAcA,cAAe,CAAAD,KAAK,CAACE,UAAN,CAAiB,QAAS,CAAAC,eAATA,CAAAC,IAAA,CAE9BC,GAF8B,CAG9B,IAFE,CAAAC,QAAF,CAEAF,IAAA,CAFEE,QAAF,CAAYC,QAAA,CAEZH,IAAA,CAFYG,QAAA,CAGZP,KAAK,CAACQ,SAAN,CAAgB,UAAM,CACpBC,OAAO,CAACC,KAAR,CACE,sFADF,EAGD,CAJD,CAIG,EAJH,EAMA,GAAM,CAAAC,OAA6B,CAAG,EAAtC,CAEA,GAAIN,GAAJ,CAAS,CACP,GAAM,CAAAO,KAAK,CAAG,CACZC,iBAAiB,UAAAA,kBAAA,CAAG,CAClB,MAAO,CAAAF,OAAO,CAACG,OAAf,CACD,CAHW,CAAd,CAUA,GAAI,MAAO,CAAAT,GAAP,GAAe,UAAnB,CAA+B,CAC7BA,GAAG,CAACO,KAAD,CAAH,CACD,CAFD,IAEO,CAELP,GAAG,CAACM,OAAJ,CAAcC,KAAd,CACD,CACF,CAED,MACE,CAAAZ,KAAA,CAAAe,aAAA,CAACd,aAAD,CAAee,QAAf,EAAwBJ,KAAK,CAAE,CAAEL,QAAA,CAAAA,QAAF,CAA/B,EACEP,KAAA,CAAAe,aAAA,CAAChB,oBAAD,CAAsBiB,QAAtB,EAA+BJ,KAAK,CAAED,OAAtC,EACGL,QADH,CADF,CADF,CAOD,CAtCc,CAAf"},"metadata":{},"sourceType":"module","externalDependencies":[]}